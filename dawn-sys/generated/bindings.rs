/* automatically generated by rust-bindgen 0.71.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub type va_list = *mut ::core::ffi::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::core::ffi::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::core::ffi::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::core::ffi::c_schar;
pub type int_least16_t = ::core::ffi::c_short;
pub type int_least32_t = ::core::ffi::c_int;
pub type int_least64_t = ::core::ffi::c_longlong;
pub type uint_least8_t = ::core::ffi::c_uchar;
pub type uint_least16_t = ::core::ffi::c_ushort;
pub type uint_least32_t = ::core::ffi::c_uint;
pub type uint_least64_t = ::core::ffi::c_ulonglong;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_int;
pub type int_fast32_t = ::core::ffi::c_int;
pub type int_fast64_t = ::core::ffi::c_longlong;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_uint;
pub type uint_fast32_t = ::core::ffi::c_uint;
pub type uint_fast64_t = ::core::ffi::c_ulonglong;
pub type intmax_t = ::core::ffi::c_longlong;
pub type uintmax_t = ::core::ffi::c_ulonglong;
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::core::ffi::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::core::ffi::c_int;
pub type wint_t = ::core::ffi::c_ushort;
pub type wctype_t = ::core::ffi::c_ushort;
pub type __time32_t = ::core::ffi::c_long;
pub type __time64_t = ::core::ffi::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::core::ffi::c_ushort,
    pub _locale_mb_cur_max: ::core::ffi::c_int,
    pub _locale_lc_codepage: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::core::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::core::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::core::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::core::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::core::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::core::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::core::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::core::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::core::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::core::ffi::c_ulong,
    pub _Byte: ::core::ffi::c_ushort,
    pub _State: ::core::ffi::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::core::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::core::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::core::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::core::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::core::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _errno() -> *mut ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::core::ffi::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::core::ffi::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __threadid() -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::core::ffi::c_int,
    pub name: *mut ::core::ffi::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _exception"][::core::mem::size_of::<_exception>() - 40usize];
    ["Alignment of _exception"][::core::mem::align_of::<_exception>() - 8usize];
    ["Offset of field: _exception::type_"][::core::mem::offset_of!(_exception, type_) - 0usize];
    ["Offset of field: _exception::name"][::core::mem::offset_of!(_exception, name) - 8usize];
    ["Offset of field: _exception::arg1"][::core::mem::offset_of!(_exception, arg1) - 16usize];
    ["Offset of field: _exception::arg2"][::core::mem::offset_of!(_exception, arg2) - 24usize];
    ["Offset of field: _exception::retval"][::core::mem::offset_of!(_exception, retval) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _complex"][::core::mem::size_of::<_complex>() - 16usize];
    ["Alignment of _complex"][::core::mem::align_of::<_complex>() - 8usize];
    ["Offset of field: _complex::x"][::core::mem::offset_of!(_complex, x) - 0usize];
    ["Offset of field: _complex::y"][::core::mem::offset_of!(_complex, y) - 8usize];
};
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub static _HUGE: f64;
}
unsafe extern "C" {
    pub fn _fperrraise(_Except: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn _dclass(_X: f64) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _ldclass(_X: f64) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fdclass(_X: f32) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _dsign(_X: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _ldsign(_X: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _fdsign(_X: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::core::ffi::c_short) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::core::ffi::c_short) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::core::ffi::c_short) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::core::ffi::c_long) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::core::ffi::c_long) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::core::ffi::c_long) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _dunscale(_Pex: *mut ::core::ffi::c_short, _Px: *mut f64) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _ldunscale(_Pex: *mut ::core::ffi::c_short, _Px: *mut f64) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fdunscale(_Pex: *mut ::core::ffi::c_short, _Px: *mut f32) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::core::ffi::c_long) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::core::ffi::c_long) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::core::ffi::c_long) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _dnorm(_Ps: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _fdnorm(_Ps: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_short;
}
unsafe extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::core::ffi::c_uint) -> f64;
}
unsafe extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::core::ffi::c_uint) -> f64;
}
unsafe extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::core::ffi::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::core::ffi::c_ushort; 4usize],
    pub _Val: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _double_val"][::core::mem::size_of::<_double_val>() - 8usize];
    ["Alignment of _double_val"][::core::mem::align_of::<_double_val>() - 8usize];
    ["Offset of field: _double_val::_Sh"][::core::mem::offset_of!(_double_val, _Sh) - 0usize];
    ["Offset of field: _double_val::_Val"][::core::mem::offset_of!(_double_val, _Val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::core::ffi::c_ushort; 2usize],
    pub _Val: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _float_val"][::core::mem::size_of::<_float_val>() - 4usize];
    ["Alignment of _float_val"][::core::mem::align_of::<_float_val>() - 4usize];
    ["Offset of field: _float_val::_Sh"][::core::mem::offset_of!(_float_val, _Sh) - 0usize];
    ["Offset of field: _float_val::_Val"][::core::mem::offset_of!(_float_val, _Val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::core::ffi::c_ushort; 4usize],
    pub _Val: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldouble_val"][::core::mem::size_of::<_ldouble_val>() - 8usize];
    ["Alignment of _ldouble_val"][::core::mem::align_of::<_ldouble_val>() - 8usize];
    ["Offset of field: _ldouble_val::_Sh"][::core::mem::offset_of!(_ldouble_val, _Sh) - 0usize];
    ["Offset of field: _ldouble_val::_Val"][::core::mem::offset_of!(_ldouble_val, _Val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::core::ffi::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _float_const"][::core::mem::size_of::<_float_const>() - 8usize];
    ["Alignment of _float_const"][::core::mem::align_of::<_float_const>() - 8usize];
    ["Offset of field: _float_const::_Word"][::core::mem::offset_of!(_float_const, _Word) - 0usize];
    ["Offset of field: _float_const::_Float"]
        [::core::mem::offset_of!(_float_const, _Float) - 0usize];
    ["Offset of field: _float_const::_Double"]
        [::core::mem::offset_of!(_float_const, _Double) - 0usize];
    ["Offset of field: _float_const::_Long_double"]
        [::core::mem::offset_of!(_float_const, _Long_double) - 0usize];
};
unsafe extern "C" {
    pub static _Denorm_C: _float_const;
}
unsafe extern "C" {
    pub static _Inf_C: _float_const;
}
unsafe extern "C" {
    pub static _Nan_C: _float_const;
}
unsafe extern "C" {
    pub static _Snan_C: _float_const;
}
unsafe extern "C" {
    pub static _Hugeval_C: _float_const;
}
unsafe extern "C" {
    pub static _FDenorm_C: _float_const;
}
unsafe extern "C" {
    pub static _FInf_C: _float_const;
}
unsafe extern "C" {
    pub static _FNan_C: _float_const;
}
unsafe extern "C" {
    pub static _FSnan_C: _float_const;
}
unsafe extern "C" {
    pub static _LDenorm_C: _float_const;
}
unsafe extern "C" {
    pub static _LInf_C: _float_const;
}
unsafe extern "C" {
    pub static _LNan_C: _float_const;
}
unsafe extern "C" {
    pub static _LSnan_C: _float_const;
}
unsafe extern "C" {
    pub static _Eps_C: _float_const;
}
unsafe extern "C" {
    pub static _Rteps_C: _float_const;
}
unsafe extern "C" {
    pub static _FEps_C: _float_const;
}
unsafe extern "C" {
    pub static _FRteps_C: _float_const;
}
unsafe extern "C" {
    pub static _LEps_C: _float_const;
}
unsafe extern "C" {
    pub static _LRteps_C: _float_const;
}
unsafe extern "C" {
    pub static _Zero_C: f64;
}
unsafe extern "C" {
    pub static _Xbig_C: f64;
}
unsafe extern "C" {
    pub static _FZero_C: f32;
}
unsafe extern "C" {
    pub static _FXbig_C: f32;
}
unsafe extern "C" {
    pub static _LZero_C: f64;
}
unsafe extern "C" {
    pub static _LXbig_C: f64;
}
unsafe extern "C" {
    pub fn abs(_X: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn labs(_X: ::core::ffi::c_long) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llabs(_X: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn acos(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn log(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atof(_String: *const ::core::ffi::c_char) -> f64;
}
unsafe extern "C" {
    pub fn _atof_l(_String: *const ::core::ffi::c_char, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(_X: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ldexp(_X: f64, _Y: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn llrint(_X: f64) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn llround(_X: f64) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn lrint(_X: f64) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn lround(_X: f64) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn nan(_X: *const ::core::ffi::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rint(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn round(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbln(_X: f64, _Y: ::core::ffi::c_long) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(_X: f64, _Y: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _jn(_X: ::core::ffi::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _yn(_X: ::core::ffi::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
unsafe extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(_X: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn llrintf(_X: f32) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn llroundf(_X: f32) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(_X: f32) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn lroundf(_X: f32) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn nanf(_X: *const ::core::ffi::c_char) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::core::ffi::c_long) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn _finitef(_X: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _isnanf(_X: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _fpclassf(_X: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _get_FMA3_enable() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn logf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
unsafe extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn ilogbl(_X: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn llrintl(_X: f64) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn llroundl(_X: f64) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn lrintl(_X: f64) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn lroundl(_X: f64) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn nanl(_X: *const ::core::ffi::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::core::ffi::c_long) -> f64;
}
unsafe extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
unsafe extern "C" {
    pub static mut HUGE: f64;
}
unsafe extern "C" {
    pub fn j0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(_X: ::core::ffi::c_int, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(_X: ::core::ffi::c_int, _Y: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUStringView {
    pub data: *const ::core::ffi::c_char,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUStringView"][::core::mem::size_of::<WGPUStringView>() - 16usize];
    ["Alignment of WGPUStringView"][::core::mem::align_of::<WGPUStringView>() - 8usize];
    ["Offset of field: WGPUStringView::data"]
        [::core::mem::offset_of!(WGPUStringView, data) - 0usize];
    ["Offset of field: WGPUStringView::length"]
        [::core::mem::offset_of!(WGPUStringView, length) - 8usize];
};
pub type WGPUFlags = u64;
pub type WGPUBool = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterImpl {
    _unused: [u8; 0],
}
pub type WGPUAdapter = *mut WGPUAdapterImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupImpl {
    _unused: [u8; 0],
}
pub type WGPUBindGroup = *mut WGPUBindGroupImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutImpl {
    _unused: [u8; 0],
}
pub type WGPUBindGroupLayout = *mut WGPUBindGroupLayoutImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferImpl {
    _unused: [u8; 0],
}
pub type WGPUBuffer = *mut WGPUBufferImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandBufferImpl {
    _unused: [u8; 0],
}
pub type WGPUCommandBuffer = *mut WGPUCommandBufferImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPUCommandEncoder = *mut WGPUCommandEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePassEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPUComputePassEncoder = *mut WGPUComputePassEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePipelineImpl {
    _unused: [u8; 0],
}
pub type WGPUComputePipeline = *mut WGPUComputePipelineImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceImpl {
    _unused: [u8; 0],
}
pub type WGPUDevice = *mut WGPUDeviceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceImpl {
    _unused: [u8; 0],
}
pub type WGPUInstance = *mut WGPUInstanceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPipelineLayoutImpl {
    _unused: [u8; 0],
}
pub type WGPUPipelineLayout = *mut WGPUPipelineLayoutImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQuerySetImpl {
    _unused: [u8; 0],
}
pub type WGPUQuerySet = *mut WGPUQuerySetImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQueueImpl {
    _unused: [u8; 0],
}
pub type WGPUQueue = *mut WGPUQueueImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleImpl {
    _unused: [u8; 0],
}
pub type WGPURenderBundle = *mut WGPURenderBundleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPURenderBundleEncoder = *mut WGPURenderBundleEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPURenderPassEncoder = *mut WGPURenderPassEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPipelineImpl {
    _unused: [u8; 0],
}
pub type WGPURenderPipeline = *mut WGPURenderPipelineImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerImpl {
    _unused: [u8; 0],
}
pub type WGPUSampler = *mut WGPUSamplerImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleImpl {
    _unused: [u8; 0],
}
pub type WGPUShaderModule = *mut WGPUShaderModuleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceImpl {
    _unused: [u8; 0],
}
pub type WGPUSurface = *mut WGPUSurfaceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureImpl {
    _unused: [u8; 0],
}
pub type WGPUTexture = *mut WGPUTextureImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureViewImpl {
    _unused: [u8; 0],
}
pub type WGPUTextureView = *mut WGPUTextureViewImpl;
pub const WGPUAdapterType_WGPUAdapterType_DiscreteGPU: WGPUAdapterType = 1;
pub const WGPUAdapterType_WGPUAdapterType_IntegratedGPU: WGPUAdapterType = 2;
pub const WGPUAdapterType_WGPUAdapterType_CPU: WGPUAdapterType = 3;
pub const WGPUAdapterType_WGPUAdapterType_Unknown: WGPUAdapterType = 4;
pub const WGPUAdapterType_WGPUAdapterType_Force32: WGPUAdapterType = 2147483647;
pub type WGPUAdapterType = ::core::ffi::c_int;
pub const WGPUAddressMode_WGPUAddressMode_Undefined: WGPUAddressMode = 0;
pub const WGPUAddressMode_WGPUAddressMode_ClampToEdge: WGPUAddressMode = 1;
pub const WGPUAddressMode_WGPUAddressMode_Repeat: WGPUAddressMode = 2;
pub const WGPUAddressMode_WGPUAddressMode_MirrorRepeat: WGPUAddressMode = 3;
pub const WGPUAddressMode_WGPUAddressMode_Force32: WGPUAddressMode = 2147483647;
pub type WGPUAddressMode = ::core::ffi::c_int;
pub const WGPUBackendType_WGPUBackendType_Undefined: WGPUBackendType = 0;
pub const WGPUBackendType_WGPUBackendType_Null: WGPUBackendType = 1;
pub const WGPUBackendType_WGPUBackendType_WebGPU: WGPUBackendType = 2;
pub const WGPUBackendType_WGPUBackendType_D3D11: WGPUBackendType = 3;
pub const WGPUBackendType_WGPUBackendType_D3D12: WGPUBackendType = 4;
pub const WGPUBackendType_WGPUBackendType_Metal: WGPUBackendType = 5;
pub const WGPUBackendType_WGPUBackendType_Vulkan: WGPUBackendType = 6;
pub const WGPUBackendType_WGPUBackendType_OpenGL: WGPUBackendType = 7;
pub const WGPUBackendType_WGPUBackendType_OpenGLES: WGPUBackendType = 8;
pub const WGPUBackendType_WGPUBackendType_Force32: WGPUBackendType = 2147483647;
pub type WGPUBackendType = ::core::ffi::c_int;
pub const WGPUBlendFactor_WGPUBlendFactor_Undefined: WGPUBlendFactor = 0;
pub const WGPUBlendFactor_WGPUBlendFactor_Zero: WGPUBlendFactor = 1;
pub const WGPUBlendFactor_WGPUBlendFactor_One: WGPUBlendFactor = 2;
pub const WGPUBlendFactor_WGPUBlendFactor_Src: WGPUBlendFactor = 3;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrc: WGPUBlendFactor = 4;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcAlpha: WGPUBlendFactor = 5;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrcAlpha: WGPUBlendFactor = 6;
pub const WGPUBlendFactor_WGPUBlendFactor_Dst: WGPUBlendFactor = 7;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusDst: WGPUBlendFactor = 8;
pub const WGPUBlendFactor_WGPUBlendFactor_DstAlpha: WGPUBlendFactor = 9;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusDstAlpha: WGPUBlendFactor = 10;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcAlphaSaturated: WGPUBlendFactor = 11;
pub const WGPUBlendFactor_WGPUBlendFactor_Constant: WGPUBlendFactor = 12;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusConstant: WGPUBlendFactor = 13;
pub const WGPUBlendFactor_WGPUBlendFactor_Src1: WGPUBlendFactor = 14;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrc1: WGPUBlendFactor = 15;
pub const WGPUBlendFactor_WGPUBlendFactor_Src1Alpha: WGPUBlendFactor = 16;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrc1Alpha: WGPUBlendFactor = 17;
pub const WGPUBlendFactor_WGPUBlendFactor_Force32: WGPUBlendFactor = 2147483647;
pub type WGPUBlendFactor = ::core::ffi::c_int;
pub const WGPUBlendOperation_WGPUBlendOperation_Undefined: WGPUBlendOperation = 0;
pub const WGPUBlendOperation_WGPUBlendOperation_Add: WGPUBlendOperation = 1;
pub const WGPUBlendOperation_WGPUBlendOperation_Subtract: WGPUBlendOperation = 2;
pub const WGPUBlendOperation_WGPUBlendOperation_ReverseSubtract: WGPUBlendOperation = 3;
pub const WGPUBlendOperation_WGPUBlendOperation_Min: WGPUBlendOperation = 4;
pub const WGPUBlendOperation_WGPUBlendOperation_Max: WGPUBlendOperation = 5;
pub const WGPUBlendOperation_WGPUBlendOperation_Force32: WGPUBlendOperation = 2147483647;
pub type WGPUBlendOperation = ::core::ffi::c_int;
pub const WGPUBufferBindingType_WGPUBufferBindingType_BindingNotUsed: WGPUBufferBindingType = 0;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Undefined: WGPUBufferBindingType = 1;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Uniform: WGPUBufferBindingType = 2;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Storage: WGPUBufferBindingType = 3;
pub const WGPUBufferBindingType_WGPUBufferBindingType_ReadOnlyStorage: WGPUBufferBindingType = 4;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Force32: WGPUBufferBindingType = 2147483647;
pub type WGPUBufferBindingType = ::core::ffi::c_int;
pub const WGPUBufferMapState_WGPUBufferMapState_Unmapped: WGPUBufferMapState = 1;
pub const WGPUBufferMapState_WGPUBufferMapState_Pending: WGPUBufferMapState = 2;
pub const WGPUBufferMapState_WGPUBufferMapState_Mapped: WGPUBufferMapState = 3;
pub const WGPUBufferMapState_WGPUBufferMapState_Force32: WGPUBufferMapState = 2147483647;
pub type WGPUBufferMapState = ::core::ffi::c_int;
pub const WGPUCallbackMode_WGPUCallbackMode_WaitAnyOnly: WGPUCallbackMode = 1;
pub const WGPUCallbackMode_WGPUCallbackMode_AllowProcessEvents: WGPUCallbackMode = 2;
pub const WGPUCallbackMode_WGPUCallbackMode_AllowSpontaneous: WGPUCallbackMode = 3;
pub const WGPUCallbackMode_WGPUCallbackMode_Force32: WGPUCallbackMode = 2147483647;
pub type WGPUCallbackMode = ::core::ffi::c_int;
pub const WGPUCompareFunction_WGPUCompareFunction_Undefined: WGPUCompareFunction = 0;
pub const WGPUCompareFunction_WGPUCompareFunction_Never: WGPUCompareFunction = 1;
pub const WGPUCompareFunction_WGPUCompareFunction_Less: WGPUCompareFunction = 2;
pub const WGPUCompareFunction_WGPUCompareFunction_Equal: WGPUCompareFunction = 3;
pub const WGPUCompareFunction_WGPUCompareFunction_LessEqual: WGPUCompareFunction = 4;
pub const WGPUCompareFunction_WGPUCompareFunction_Greater: WGPUCompareFunction = 5;
pub const WGPUCompareFunction_WGPUCompareFunction_NotEqual: WGPUCompareFunction = 6;
pub const WGPUCompareFunction_WGPUCompareFunction_GreaterEqual: WGPUCompareFunction = 7;
pub const WGPUCompareFunction_WGPUCompareFunction_Always: WGPUCompareFunction = 8;
pub const WGPUCompareFunction_WGPUCompareFunction_Force32: WGPUCompareFunction = 2147483647;
pub type WGPUCompareFunction = ::core::ffi::c_int;
pub const WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_Success:
    WGPUCompilationInfoRequestStatus = 1;
pub const WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_CallbackCancelled:
    WGPUCompilationInfoRequestStatus = 2;
pub const WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_Force32:
    WGPUCompilationInfoRequestStatus = 2147483647;
pub type WGPUCompilationInfoRequestStatus = ::core::ffi::c_int;
pub const WGPUCompilationMessageType_WGPUCompilationMessageType_Error: WGPUCompilationMessageType =
    1;
pub const WGPUCompilationMessageType_WGPUCompilationMessageType_Warning:
    WGPUCompilationMessageType = 2;
pub const WGPUCompilationMessageType_WGPUCompilationMessageType_Info: WGPUCompilationMessageType =
    3;
pub const WGPUCompilationMessageType_WGPUCompilationMessageType_Force32:
    WGPUCompilationMessageType = 2147483647;
pub type WGPUCompilationMessageType = ::core::ffi::c_int;
pub const WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Auto: WGPUCompositeAlphaMode = 0;
pub const WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Opaque: WGPUCompositeAlphaMode = 1;
pub const WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Premultiplied: WGPUCompositeAlphaMode = 2;
pub const WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Unpremultiplied: WGPUCompositeAlphaMode = 3;
pub const WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Inherit: WGPUCompositeAlphaMode = 4;
pub const WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Force32: WGPUCompositeAlphaMode =
    2147483647;
pub type WGPUCompositeAlphaMode = ::core::ffi::c_int;
pub const WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_Success:
    WGPUCreatePipelineAsyncStatus = 1;
pub const WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_CallbackCancelled:
    WGPUCreatePipelineAsyncStatus = 2;
pub const WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_ValidationError:
    WGPUCreatePipelineAsyncStatus = 3;
pub const WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_InternalError:
    WGPUCreatePipelineAsyncStatus = 4;
pub const WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_Force32:
    WGPUCreatePipelineAsyncStatus = 2147483647;
pub type WGPUCreatePipelineAsyncStatus = ::core::ffi::c_int;
pub const WGPUCullMode_WGPUCullMode_Undefined: WGPUCullMode = 0;
pub const WGPUCullMode_WGPUCullMode_None: WGPUCullMode = 1;
pub const WGPUCullMode_WGPUCullMode_Front: WGPUCullMode = 2;
pub const WGPUCullMode_WGPUCullMode_Back: WGPUCullMode = 3;
pub const WGPUCullMode_WGPUCullMode_Force32: WGPUCullMode = 2147483647;
pub type WGPUCullMode = ::core::ffi::c_int;
pub const WGPUDeviceLostReason_WGPUDeviceLostReason_Unknown: WGPUDeviceLostReason = 1;
pub const WGPUDeviceLostReason_WGPUDeviceLostReason_Destroyed: WGPUDeviceLostReason = 2;
pub const WGPUDeviceLostReason_WGPUDeviceLostReason_CallbackCancelled: WGPUDeviceLostReason = 3;
pub const WGPUDeviceLostReason_WGPUDeviceLostReason_FailedCreation: WGPUDeviceLostReason = 4;
pub const WGPUDeviceLostReason_WGPUDeviceLostReason_Force32: WGPUDeviceLostReason = 2147483647;
pub type WGPUDeviceLostReason = ::core::ffi::c_int;
pub const WGPUErrorFilter_WGPUErrorFilter_Validation: WGPUErrorFilter = 1;
pub const WGPUErrorFilter_WGPUErrorFilter_OutOfMemory: WGPUErrorFilter = 2;
pub const WGPUErrorFilter_WGPUErrorFilter_Internal: WGPUErrorFilter = 3;
pub const WGPUErrorFilter_WGPUErrorFilter_Force32: WGPUErrorFilter = 2147483647;
pub type WGPUErrorFilter = ::core::ffi::c_int;
pub const WGPUErrorType_WGPUErrorType_NoError: WGPUErrorType = 1;
pub const WGPUErrorType_WGPUErrorType_Validation: WGPUErrorType = 2;
pub const WGPUErrorType_WGPUErrorType_OutOfMemory: WGPUErrorType = 3;
pub const WGPUErrorType_WGPUErrorType_Internal: WGPUErrorType = 4;
pub const WGPUErrorType_WGPUErrorType_Unknown: WGPUErrorType = 5;
pub const WGPUErrorType_WGPUErrorType_Force32: WGPUErrorType = 2147483647;
pub type WGPUErrorType = ::core::ffi::c_int;
pub const WGPUFeatureLevel_WGPUFeatureLevel_Undefined: WGPUFeatureLevel = 0;
pub const WGPUFeatureLevel_WGPUFeatureLevel_Compatibility: WGPUFeatureLevel = 1;
pub const WGPUFeatureLevel_WGPUFeatureLevel_Core: WGPUFeatureLevel = 2;
pub const WGPUFeatureLevel_WGPUFeatureLevel_Force32: WGPUFeatureLevel = 2147483647;
pub type WGPUFeatureLevel = ::core::ffi::c_int;
pub const WGPUFeatureName_WGPUFeatureName_DepthClipControl: WGPUFeatureName = 1;
pub const WGPUFeatureName_WGPUFeatureName_Depth32FloatStencil8: WGPUFeatureName = 2;
pub const WGPUFeatureName_WGPUFeatureName_TimestampQuery: WGPUFeatureName = 3;
pub const WGPUFeatureName_WGPUFeatureName_TextureCompressionBC: WGPUFeatureName = 4;
pub const WGPUFeatureName_WGPUFeatureName_TextureCompressionBCSliced3D: WGPUFeatureName = 5;
pub const WGPUFeatureName_WGPUFeatureName_TextureCompressionETC2: WGPUFeatureName = 6;
pub const WGPUFeatureName_WGPUFeatureName_TextureCompressionASTC: WGPUFeatureName = 7;
pub const WGPUFeatureName_WGPUFeatureName_TextureCompressionASTCSliced3D: WGPUFeatureName = 8;
pub const WGPUFeatureName_WGPUFeatureName_IndirectFirstInstance: WGPUFeatureName = 9;
pub const WGPUFeatureName_WGPUFeatureName_ShaderF16: WGPUFeatureName = 10;
pub const WGPUFeatureName_WGPUFeatureName_RG11B10UfloatRenderable: WGPUFeatureName = 11;
pub const WGPUFeatureName_WGPUFeatureName_BGRA8UnormStorage: WGPUFeatureName = 12;
pub const WGPUFeatureName_WGPUFeatureName_Float32Filterable: WGPUFeatureName = 13;
pub const WGPUFeatureName_WGPUFeatureName_Float32Blendable: WGPUFeatureName = 14;
pub const WGPUFeatureName_WGPUFeatureName_ClipDistances: WGPUFeatureName = 15;
pub const WGPUFeatureName_WGPUFeatureName_DualSourceBlending: WGPUFeatureName = 16;
pub const WGPUFeatureName_WGPUFeatureName_Subgroups: WGPUFeatureName = 17;
pub const WGPUFeatureName_WGPUFeatureName_Force32: WGPUFeatureName = 2147483647;
pub type WGPUFeatureName = ::core::ffi::c_int;
pub const WGPUFilterMode_WGPUFilterMode_Undefined: WGPUFilterMode = 0;
pub const WGPUFilterMode_WGPUFilterMode_Nearest: WGPUFilterMode = 1;
pub const WGPUFilterMode_WGPUFilterMode_Linear: WGPUFilterMode = 2;
pub const WGPUFilterMode_WGPUFilterMode_Force32: WGPUFilterMode = 2147483647;
pub type WGPUFilterMode = ::core::ffi::c_int;
pub const WGPUFrontFace_WGPUFrontFace_Undefined: WGPUFrontFace = 0;
pub const WGPUFrontFace_WGPUFrontFace_CCW: WGPUFrontFace = 1;
pub const WGPUFrontFace_WGPUFrontFace_CW: WGPUFrontFace = 2;
pub const WGPUFrontFace_WGPUFrontFace_Force32: WGPUFrontFace = 2147483647;
pub type WGPUFrontFace = ::core::ffi::c_int;
pub const WGPUIndexFormat_WGPUIndexFormat_Undefined: WGPUIndexFormat = 0;
pub const WGPUIndexFormat_WGPUIndexFormat_Uint16: WGPUIndexFormat = 1;
pub const WGPUIndexFormat_WGPUIndexFormat_Uint32: WGPUIndexFormat = 2;
pub const WGPUIndexFormat_WGPUIndexFormat_Force32: WGPUIndexFormat = 2147483647;
pub type WGPUIndexFormat = ::core::ffi::c_int;
pub const WGPUInstanceFeatureName_WGPUInstanceFeatureName_TimedWaitAnyEnable:
    WGPUInstanceFeatureName = 1;
pub const WGPUInstanceFeatureName_WGPUInstanceFeatureName_ShaderSourceSPIRV:
    WGPUInstanceFeatureName = 2;
pub const WGPUInstanceFeatureName_WGPUInstanceFeatureName_MultipleDevicesPerAdapter:
    WGPUInstanceFeatureName = 3;
pub const WGPUInstanceFeatureName_WGPUInstanceFeatureName_Force32: WGPUInstanceFeatureName =
    2147483647;
pub type WGPUInstanceFeatureName = ::core::ffi::c_int;
pub const WGPULoadOp_WGPULoadOp_Undefined: WGPULoadOp = 0;
pub const WGPULoadOp_WGPULoadOp_Load: WGPULoadOp = 1;
pub const WGPULoadOp_WGPULoadOp_Clear: WGPULoadOp = 2;
pub const WGPULoadOp_WGPULoadOp_Force32: WGPULoadOp = 2147483647;
pub type WGPULoadOp = ::core::ffi::c_int;
pub const WGPUMapAsyncStatus_WGPUMapAsyncStatus_Success: WGPUMapAsyncStatus = 1;
pub const WGPUMapAsyncStatus_WGPUMapAsyncStatus_CallbackCancelled: WGPUMapAsyncStatus = 2;
pub const WGPUMapAsyncStatus_WGPUMapAsyncStatus_Error: WGPUMapAsyncStatus = 3;
pub const WGPUMapAsyncStatus_WGPUMapAsyncStatus_Aborted: WGPUMapAsyncStatus = 4;
pub const WGPUMapAsyncStatus_WGPUMapAsyncStatus_Force32: WGPUMapAsyncStatus = 2147483647;
pub type WGPUMapAsyncStatus = ::core::ffi::c_int;
pub const WGPUMipmapFilterMode_WGPUMipmapFilterMode_Undefined: WGPUMipmapFilterMode = 0;
pub const WGPUMipmapFilterMode_WGPUMipmapFilterMode_Nearest: WGPUMipmapFilterMode = 1;
pub const WGPUMipmapFilterMode_WGPUMipmapFilterMode_Linear: WGPUMipmapFilterMode = 2;
pub const WGPUMipmapFilterMode_WGPUMipmapFilterMode_Force32: WGPUMipmapFilterMode = 2147483647;
pub type WGPUMipmapFilterMode = ::core::ffi::c_int;
pub const WGPUOptionalBool_WGPUOptionalBool_False: WGPUOptionalBool = 0;
pub const WGPUOptionalBool_WGPUOptionalBool_True: WGPUOptionalBool = 1;
pub const WGPUOptionalBool_WGPUOptionalBool_Undefined: WGPUOptionalBool = 2;
pub const WGPUOptionalBool_WGPUOptionalBool_Force32: WGPUOptionalBool = 2147483647;
pub type WGPUOptionalBool = ::core::ffi::c_int;
pub const WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_Success: WGPUPopErrorScopeStatus = 1;
pub const WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_CallbackCancelled:
    WGPUPopErrorScopeStatus = 2;
pub const WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_Error: WGPUPopErrorScopeStatus = 3;
pub const WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_Force32: WGPUPopErrorScopeStatus =
    2147483647;
pub type WGPUPopErrorScopeStatus = ::core::ffi::c_int;
pub const WGPUPowerPreference_WGPUPowerPreference_Undefined: WGPUPowerPreference = 0;
pub const WGPUPowerPreference_WGPUPowerPreference_LowPower: WGPUPowerPreference = 1;
pub const WGPUPowerPreference_WGPUPowerPreference_HighPerformance: WGPUPowerPreference = 2;
pub const WGPUPowerPreference_WGPUPowerPreference_Force32: WGPUPowerPreference = 2147483647;
pub type WGPUPowerPreference = ::core::ffi::c_int;
pub const WGPUPredefinedColorSpace_WGPUPredefinedColorSpace_SRGB: WGPUPredefinedColorSpace = 1;
pub const WGPUPredefinedColorSpace_WGPUPredefinedColorSpace_DisplayP3: WGPUPredefinedColorSpace = 2;
pub const WGPUPredefinedColorSpace_WGPUPredefinedColorSpace_Force32: WGPUPredefinedColorSpace =
    2147483647;
pub type WGPUPredefinedColorSpace = ::core::ffi::c_int;
pub const WGPUPresentMode_WGPUPresentMode_Undefined: WGPUPresentMode = 0;
pub const WGPUPresentMode_WGPUPresentMode_Fifo: WGPUPresentMode = 1;
pub const WGPUPresentMode_WGPUPresentMode_FifoRelaxed: WGPUPresentMode = 2;
pub const WGPUPresentMode_WGPUPresentMode_Immediate: WGPUPresentMode = 3;
pub const WGPUPresentMode_WGPUPresentMode_Mailbox: WGPUPresentMode = 4;
pub const WGPUPresentMode_WGPUPresentMode_Force32: WGPUPresentMode = 2147483647;
pub type WGPUPresentMode = ::core::ffi::c_int;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_Undefined: WGPUPrimitiveTopology = 0;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_PointList: WGPUPrimitiveTopology = 1;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineList: WGPUPrimitiveTopology = 2;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineStrip: WGPUPrimitiveTopology = 3;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleList: WGPUPrimitiveTopology = 4;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleStrip: WGPUPrimitiveTopology = 5;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_Force32: WGPUPrimitiveTopology = 2147483647;
pub type WGPUPrimitiveTopology = ::core::ffi::c_int;
pub const WGPUQueryType_WGPUQueryType_Occlusion: WGPUQueryType = 1;
pub const WGPUQueryType_WGPUQueryType_Timestamp: WGPUQueryType = 2;
pub const WGPUQueryType_WGPUQueryType_Force32: WGPUQueryType = 2147483647;
pub type WGPUQueryType = ::core::ffi::c_int;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Success: WGPUQueueWorkDoneStatus = 1;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_CallbackCancelled:
    WGPUQueueWorkDoneStatus = 2;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Error: WGPUQueueWorkDoneStatus = 3;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Force32: WGPUQueueWorkDoneStatus =
    2147483647;
pub type WGPUQueueWorkDoneStatus = ::core::ffi::c_int;
pub const WGPURequestAdapterStatus_WGPURequestAdapterStatus_Success: WGPURequestAdapterStatus = 1;
pub const WGPURequestAdapterStatus_WGPURequestAdapterStatus_CallbackCancelled:
    WGPURequestAdapterStatus = 2;
pub const WGPURequestAdapterStatus_WGPURequestAdapterStatus_Unavailable: WGPURequestAdapterStatus =
    3;
pub const WGPURequestAdapterStatus_WGPURequestAdapterStatus_Error: WGPURequestAdapterStatus = 4;
pub const WGPURequestAdapterStatus_WGPURequestAdapterStatus_Force32: WGPURequestAdapterStatus =
    2147483647;
pub type WGPURequestAdapterStatus = ::core::ffi::c_int;
pub const WGPURequestDeviceStatus_WGPURequestDeviceStatus_Success: WGPURequestDeviceStatus = 1;
pub const WGPURequestDeviceStatus_WGPURequestDeviceStatus_CallbackCancelled:
    WGPURequestDeviceStatus = 2;
pub const WGPURequestDeviceStatus_WGPURequestDeviceStatus_Error: WGPURequestDeviceStatus = 3;
pub const WGPURequestDeviceStatus_WGPURequestDeviceStatus_Force32: WGPURequestDeviceStatus =
    2147483647;
pub type WGPURequestDeviceStatus = ::core::ffi::c_int;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_BindingNotUsed: WGPUSamplerBindingType = 0;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Undefined: WGPUSamplerBindingType = 1;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Filtering: WGPUSamplerBindingType = 2;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_NonFiltering: WGPUSamplerBindingType = 3;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Comparison: WGPUSamplerBindingType = 4;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Force32: WGPUSamplerBindingType =
    2147483647;
pub type WGPUSamplerBindingType = ::core::ffi::c_int;
pub const WGPUStatus_WGPUStatus_Success: WGPUStatus = 1;
pub const WGPUStatus_WGPUStatus_Error: WGPUStatus = 2;
pub const WGPUStatus_WGPUStatus_Force32: WGPUStatus = 2147483647;
pub type WGPUStatus = ::core::ffi::c_int;
pub const WGPUStencilOperation_WGPUStencilOperation_Undefined: WGPUStencilOperation = 0;
pub const WGPUStencilOperation_WGPUStencilOperation_Keep: WGPUStencilOperation = 1;
pub const WGPUStencilOperation_WGPUStencilOperation_Zero: WGPUStencilOperation = 2;
pub const WGPUStencilOperation_WGPUStencilOperation_Replace: WGPUStencilOperation = 3;
pub const WGPUStencilOperation_WGPUStencilOperation_Invert: WGPUStencilOperation = 4;
pub const WGPUStencilOperation_WGPUStencilOperation_IncrementClamp: WGPUStencilOperation = 5;
pub const WGPUStencilOperation_WGPUStencilOperation_DecrementClamp: WGPUStencilOperation = 6;
pub const WGPUStencilOperation_WGPUStencilOperation_IncrementWrap: WGPUStencilOperation = 7;
pub const WGPUStencilOperation_WGPUStencilOperation_DecrementWrap: WGPUStencilOperation = 8;
pub const WGPUStencilOperation_WGPUStencilOperation_Force32: WGPUStencilOperation = 2147483647;
pub type WGPUStencilOperation = ::core::ffi::c_int;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_BindingNotUsed:
    WGPUStorageTextureAccess = 0;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_Undefined: WGPUStorageTextureAccess = 1;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_WriteOnly: WGPUStorageTextureAccess = 2;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_ReadOnly: WGPUStorageTextureAccess = 3;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_ReadWrite: WGPUStorageTextureAccess = 4;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_Force32: WGPUStorageTextureAccess =
    2147483647;
pub type WGPUStorageTextureAccess = ::core::ffi::c_int;
pub const WGPUStoreOp_WGPUStoreOp_Undefined: WGPUStoreOp = 0;
pub const WGPUStoreOp_WGPUStoreOp_Store: WGPUStoreOp = 1;
pub const WGPUStoreOp_WGPUStoreOp_Discard: WGPUStoreOp = 2;
pub const WGPUStoreOp_WGPUStoreOp_Force32: WGPUStoreOp = 2147483647;
pub type WGPUStoreOp = ::core::ffi::c_int;
pub const WGPUSType_WGPUSType_ShaderSourceSPIRV: WGPUSType = 1;
pub const WGPUSType_WGPUSType_ShaderSourceWGSL: WGPUSType = 2;
pub const WGPUSType_WGPUSType_RenderPassMaxDrawCount: WGPUSType = 3;
pub const WGPUSType_WGPUSType_SurfaceSourceMetalLayer: WGPUSType = 4;
pub const WGPUSType_WGPUSType_SurfaceSourceWindowsHWND: WGPUSType = 5;
pub const WGPUSType_WGPUSType_SurfaceSourceXlibWindow: WGPUSType = 6;
pub const WGPUSType_WGPUSType_SurfaceSourceWaylandSurface: WGPUSType = 7;
pub const WGPUSType_WGPUSType_SurfaceSourceAndroidNativeWindow: WGPUSType = 8;
pub const WGPUSType_WGPUSType_SurfaceSourceXCBWindow: WGPUSType = 9;
pub const WGPUSType_WGPUSType_SurfaceColorManagement: WGPUSType = 10;
pub const WGPUSType_WGPUSType_RequestAdapterWebXROptions: WGPUSType = 11;
pub const WGPUSType_WGPUSType_Force32: WGPUSType = 2147483647;
pub type WGPUSType = ::core::ffi::c_int;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal:
    WGPUSurfaceGetCurrentTextureStatus = 1;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal : WGPUSurfaceGetCurrentTextureStatus = 2 ;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Timeout:
    WGPUSurfaceGetCurrentTextureStatus = 3;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Outdated:
    WGPUSurfaceGetCurrentTextureStatus = 4;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Lost:
    WGPUSurfaceGetCurrentTextureStatus = 5;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Error:
    WGPUSurfaceGetCurrentTextureStatus = 6;
pub const WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Force32:
    WGPUSurfaceGetCurrentTextureStatus = 2147483647;
pub type WGPUSurfaceGetCurrentTextureStatus = ::core::ffi::c_int;
pub const WGPUTextureAspect_WGPUTextureAspect_Undefined: WGPUTextureAspect = 0;
pub const WGPUTextureAspect_WGPUTextureAspect_All: WGPUTextureAspect = 1;
pub const WGPUTextureAspect_WGPUTextureAspect_StencilOnly: WGPUTextureAspect = 2;
pub const WGPUTextureAspect_WGPUTextureAspect_DepthOnly: WGPUTextureAspect = 3;
pub const WGPUTextureAspect_WGPUTextureAspect_Force32: WGPUTextureAspect = 2147483647;
pub type WGPUTextureAspect = ::core::ffi::c_int;
pub const WGPUTextureDimension_WGPUTextureDimension_Undefined: WGPUTextureDimension = 0;
pub const WGPUTextureDimension_WGPUTextureDimension_1D: WGPUTextureDimension = 1;
pub const WGPUTextureDimension_WGPUTextureDimension_2D: WGPUTextureDimension = 2;
pub const WGPUTextureDimension_WGPUTextureDimension_3D: WGPUTextureDimension = 3;
pub const WGPUTextureDimension_WGPUTextureDimension_Force32: WGPUTextureDimension = 2147483647;
pub type WGPUTextureDimension = ::core::ffi::c_int;
pub const WGPUTextureFormat_WGPUTextureFormat_Undefined: WGPUTextureFormat = 0;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Unorm: WGPUTextureFormat = 1;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Snorm: WGPUTextureFormat = 2;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Uint: WGPUTextureFormat = 3;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Sint: WGPUTextureFormat = 4;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Uint: WGPUTextureFormat = 5;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Sint: WGPUTextureFormat = 6;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Float: WGPUTextureFormat = 7;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Unorm: WGPUTextureFormat = 8;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Snorm: WGPUTextureFormat = 9;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Uint: WGPUTextureFormat = 10;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Sint: WGPUTextureFormat = 11;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Float: WGPUTextureFormat = 12;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Uint: WGPUTextureFormat = 13;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Sint: WGPUTextureFormat = 14;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Uint: WGPUTextureFormat = 15;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Sint: WGPUTextureFormat = 16;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Float: WGPUTextureFormat = 17;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Unorm: WGPUTextureFormat = 18;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8UnormSrgb: WGPUTextureFormat = 19;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Snorm: WGPUTextureFormat = 20;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Uint: WGPUTextureFormat = 21;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Sint: WGPUTextureFormat = 22;
pub const WGPUTextureFormat_WGPUTextureFormat_BGRA8Unorm: WGPUTextureFormat = 23;
pub const WGPUTextureFormat_WGPUTextureFormat_BGRA8UnormSrgb: WGPUTextureFormat = 24;
pub const WGPUTextureFormat_WGPUTextureFormat_RGB10A2Uint: WGPUTextureFormat = 25;
pub const WGPUTextureFormat_WGPUTextureFormat_RGB10A2Unorm: WGPUTextureFormat = 26;
pub const WGPUTextureFormat_WGPUTextureFormat_RG11B10Ufloat: WGPUTextureFormat = 27;
pub const WGPUTextureFormat_WGPUTextureFormat_RGB9E5Ufloat: WGPUTextureFormat = 28;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Float: WGPUTextureFormat = 29;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Uint: WGPUTextureFormat = 30;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Sint: WGPUTextureFormat = 31;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Uint: WGPUTextureFormat = 32;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Sint: WGPUTextureFormat = 33;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Float: WGPUTextureFormat = 34;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Float: WGPUTextureFormat = 35;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Uint: WGPUTextureFormat = 36;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Sint: WGPUTextureFormat = 37;
pub const WGPUTextureFormat_WGPUTextureFormat_Stencil8: WGPUTextureFormat = 38;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth16Unorm: WGPUTextureFormat = 39;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth24Plus: WGPUTextureFormat = 40;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth24PlusStencil8: WGPUTextureFormat = 41;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth32Float: WGPUTextureFormat = 42;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth32FloatStencil8: WGPUTextureFormat = 43;
pub const WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnorm: WGPUTextureFormat = 44;
pub const WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnormSrgb: WGPUTextureFormat = 45;
pub const WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnorm: WGPUTextureFormat = 46;
pub const WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnormSrgb: WGPUTextureFormat = 47;
pub const WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnorm: WGPUTextureFormat = 48;
pub const WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnormSrgb: WGPUTextureFormat = 49;
pub const WGPUTextureFormat_WGPUTextureFormat_BC4RUnorm: WGPUTextureFormat = 50;
pub const WGPUTextureFormat_WGPUTextureFormat_BC4RSnorm: WGPUTextureFormat = 51;
pub const WGPUTextureFormat_WGPUTextureFormat_BC5RGUnorm: WGPUTextureFormat = 52;
pub const WGPUTextureFormat_WGPUTextureFormat_BC5RGSnorm: WGPUTextureFormat = 53;
pub const WGPUTextureFormat_WGPUTextureFormat_BC6HRGBUfloat: WGPUTextureFormat = 54;
pub const WGPUTextureFormat_WGPUTextureFormat_BC6HRGBFloat: WGPUTextureFormat = 55;
pub const WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnorm: WGPUTextureFormat = 56;
pub const WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnormSrgb: WGPUTextureFormat = 57;
pub const WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8Unorm: WGPUTextureFormat = 58;
pub const WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8UnormSrgb: WGPUTextureFormat = 59;
pub const WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8A1Unorm: WGPUTextureFormat = 60;
pub const WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8A1UnormSrgb: WGPUTextureFormat = 61;
pub const WGPUTextureFormat_WGPUTextureFormat_ETC2RGBA8Unorm: WGPUTextureFormat = 62;
pub const WGPUTextureFormat_WGPUTextureFormat_ETC2RGBA8UnormSrgb: WGPUTextureFormat = 63;
pub const WGPUTextureFormat_WGPUTextureFormat_EACR11Unorm: WGPUTextureFormat = 64;
pub const WGPUTextureFormat_WGPUTextureFormat_EACR11Snorm: WGPUTextureFormat = 65;
pub const WGPUTextureFormat_WGPUTextureFormat_EACRG11Unorm: WGPUTextureFormat = 66;
pub const WGPUTextureFormat_WGPUTextureFormat_EACRG11Snorm: WGPUTextureFormat = 67;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC4x4Unorm: WGPUTextureFormat = 68;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC4x4UnormSrgb: WGPUTextureFormat = 69;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC5x4Unorm: WGPUTextureFormat = 70;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC5x4UnormSrgb: WGPUTextureFormat = 71;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC5x5Unorm: WGPUTextureFormat = 72;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC5x5UnormSrgb: WGPUTextureFormat = 73;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC6x5Unorm: WGPUTextureFormat = 74;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC6x5UnormSrgb: WGPUTextureFormat = 75;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC6x6Unorm: WGPUTextureFormat = 76;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC6x6UnormSrgb: WGPUTextureFormat = 77;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC8x5Unorm: WGPUTextureFormat = 78;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC8x5UnormSrgb: WGPUTextureFormat = 79;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC8x6Unorm: WGPUTextureFormat = 80;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC8x6UnormSrgb: WGPUTextureFormat = 81;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC8x8Unorm: WGPUTextureFormat = 82;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC8x8UnormSrgb: WGPUTextureFormat = 83;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x5Unorm: WGPUTextureFormat = 84;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x5UnormSrgb: WGPUTextureFormat = 85;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x6Unorm: WGPUTextureFormat = 86;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x6UnormSrgb: WGPUTextureFormat = 87;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x8Unorm: WGPUTextureFormat = 88;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x8UnormSrgb: WGPUTextureFormat = 89;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x10Unorm: WGPUTextureFormat = 90;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC10x10UnormSrgb: WGPUTextureFormat = 91;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC12x10Unorm: WGPUTextureFormat = 92;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC12x10UnormSrgb: WGPUTextureFormat = 93;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC12x12Unorm: WGPUTextureFormat = 94;
pub const WGPUTextureFormat_WGPUTextureFormat_ASTC12x12UnormSrgb: WGPUTextureFormat = 95;
pub const WGPUTextureFormat_WGPUTextureFormat_Force32: WGPUTextureFormat = 2147483647;
pub type WGPUTextureFormat = ::core::ffi::c_int;
pub const WGPUTextureSampleType_WGPUTextureSampleType_BindingNotUsed: WGPUTextureSampleType = 0;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Undefined: WGPUTextureSampleType = 1;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Float: WGPUTextureSampleType = 2;
pub const WGPUTextureSampleType_WGPUTextureSampleType_UnfilterableFloat: WGPUTextureSampleType = 3;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Depth: WGPUTextureSampleType = 4;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Sint: WGPUTextureSampleType = 5;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Uint: WGPUTextureSampleType = 6;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Force32: WGPUTextureSampleType = 2147483647;
pub type WGPUTextureSampleType = ::core::ffi::c_int;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Undefined: WGPUTextureViewDimension = 0;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_1D: WGPUTextureViewDimension = 1;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_2D: WGPUTextureViewDimension = 2;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_2DArray: WGPUTextureViewDimension = 3;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Cube: WGPUTextureViewDimension = 4;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_CubeArray: WGPUTextureViewDimension = 5;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_3D: WGPUTextureViewDimension = 6;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Force32: WGPUTextureViewDimension =
    2147483647;
pub type WGPUTextureViewDimension = ::core::ffi::c_int;
pub const WGPUToneMappingMode_WGPUToneMappingMode_Standard: WGPUToneMappingMode = 1;
pub const WGPUToneMappingMode_WGPUToneMappingMode_Extended: WGPUToneMappingMode = 2;
pub const WGPUToneMappingMode_WGPUToneMappingMode_Force32: WGPUToneMappingMode = 2147483647;
pub type WGPUToneMappingMode = ::core::ffi::c_int;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint8: WGPUVertexFormat = 1;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint8x2: WGPUVertexFormat = 2;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint8x4: WGPUVertexFormat = 3;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint8: WGPUVertexFormat = 4;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint8x2: WGPUVertexFormat = 5;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint8x4: WGPUVertexFormat = 6;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm8: WGPUVertexFormat = 7;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm8x2: WGPUVertexFormat = 8;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm8x4: WGPUVertexFormat = 9;
pub const WGPUVertexFormat_WGPUVertexFormat_Snorm8: WGPUVertexFormat = 10;
pub const WGPUVertexFormat_WGPUVertexFormat_Snorm8x2: WGPUVertexFormat = 11;
pub const WGPUVertexFormat_WGPUVertexFormat_Snorm8x4: WGPUVertexFormat = 12;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint16: WGPUVertexFormat = 13;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint16x2: WGPUVertexFormat = 14;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint16x4: WGPUVertexFormat = 15;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint16: WGPUVertexFormat = 16;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint16x2: WGPUVertexFormat = 17;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint16x4: WGPUVertexFormat = 18;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm16: WGPUVertexFormat = 19;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm16x2: WGPUVertexFormat = 20;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm16x4: WGPUVertexFormat = 21;
pub const WGPUVertexFormat_WGPUVertexFormat_Snorm16: WGPUVertexFormat = 22;
pub const WGPUVertexFormat_WGPUVertexFormat_Snorm16x2: WGPUVertexFormat = 23;
pub const WGPUVertexFormat_WGPUVertexFormat_Snorm16x4: WGPUVertexFormat = 24;
pub const WGPUVertexFormat_WGPUVertexFormat_Float16: WGPUVertexFormat = 25;
pub const WGPUVertexFormat_WGPUVertexFormat_Float16x2: WGPUVertexFormat = 26;
pub const WGPUVertexFormat_WGPUVertexFormat_Float16x4: WGPUVertexFormat = 27;
pub const WGPUVertexFormat_WGPUVertexFormat_Float32: WGPUVertexFormat = 28;
pub const WGPUVertexFormat_WGPUVertexFormat_Float32x2: WGPUVertexFormat = 29;
pub const WGPUVertexFormat_WGPUVertexFormat_Float32x3: WGPUVertexFormat = 30;
pub const WGPUVertexFormat_WGPUVertexFormat_Float32x4: WGPUVertexFormat = 31;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint32: WGPUVertexFormat = 32;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint32x2: WGPUVertexFormat = 33;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint32x3: WGPUVertexFormat = 34;
pub const WGPUVertexFormat_WGPUVertexFormat_Uint32x4: WGPUVertexFormat = 35;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint32: WGPUVertexFormat = 36;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint32x2: WGPUVertexFormat = 37;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint32x3: WGPUVertexFormat = 38;
pub const WGPUVertexFormat_WGPUVertexFormat_Sint32x4: WGPUVertexFormat = 39;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm10_10_10_2: WGPUVertexFormat = 40;
pub const WGPUVertexFormat_WGPUVertexFormat_Unorm8x4BGRA: WGPUVertexFormat = 41;
pub const WGPUVertexFormat_WGPUVertexFormat_Force32: WGPUVertexFormat = 2147483647;
pub type WGPUVertexFormat = ::core::ffi::c_int;
pub const WGPUVertexStepMode_WGPUVertexStepMode_Undefined: WGPUVertexStepMode = 0;
pub const WGPUVertexStepMode_WGPUVertexStepMode_Vertex: WGPUVertexStepMode = 1;
pub const WGPUVertexStepMode_WGPUVertexStepMode_Instance: WGPUVertexStepMode = 2;
pub const WGPUVertexStepMode_WGPUVertexStepMode_Force32: WGPUVertexStepMode = 2147483647;
pub type WGPUVertexStepMode = ::core::ffi::c_int;
pub const WGPUWaitStatus_WGPUWaitStatus_Success: WGPUWaitStatus = 1;
pub const WGPUWaitStatus_WGPUWaitStatus_TimedOut: WGPUWaitStatus = 2;
pub const WGPUWaitStatus_WGPUWaitStatus_Error: WGPUWaitStatus = 3;
pub const WGPUWaitStatus_WGPUWaitStatus_Force32: WGPUWaitStatus = 2147483647;
pub type WGPUWaitStatus = ::core::ffi::c_int;
pub const WGPUWGSLLanguageFeatureName_WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures : WGPUWGSLLanguageFeatureName = 1 ;
pub const WGPUWGSLLanguageFeatureName_WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct:
    WGPUWGSLLanguageFeatureName = 2;
pub const WGPUWGSLLanguageFeatureName_WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters:
    WGPUWGSLLanguageFeatureName = 3;
pub const WGPUWGSLLanguageFeatureName_WGPUWGSLLanguageFeatureName_PointerCompositeAccess:
    WGPUWGSLLanguageFeatureName = 4;
pub const WGPUWGSLLanguageFeatureName_WGPUWGSLLanguageFeatureName_Force32:
    WGPUWGSLLanguageFeatureName = 2147483647;
pub type WGPUWGSLLanguageFeatureName = ::core::ffi::c_int;
pub type WGPUBufferUsage = WGPUFlags;
pub const WGPUBufferUsage_None: WGPUBufferUsage = 0;
pub const WGPUBufferUsage_MapRead: WGPUBufferUsage = 1;
pub const WGPUBufferUsage_MapWrite: WGPUBufferUsage = 2;
pub const WGPUBufferUsage_CopySrc: WGPUBufferUsage = 4;
pub const WGPUBufferUsage_CopyDst: WGPUBufferUsage = 8;
pub const WGPUBufferUsage_Index: WGPUBufferUsage = 16;
pub const WGPUBufferUsage_Vertex: WGPUBufferUsage = 32;
pub const WGPUBufferUsage_Uniform: WGPUBufferUsage = 64;
pub const WGPUBufferUsage_Storage: WGPUBufferUsage = 128;
pub const WGPUBufferUsage_Indirect: WGPUBufferUsage = 256;
pub const WGPUBufferUsage_QueryResolve: WGPUBufferUsage = 512;
pub type WGPUColorWriteMask = WGPUFlags;
pub const WGPUColorWriteMask_None: WGPUColorWriteMask = 0;
pub const WGPUColorWriteMask_Red: WGPUColorWriteMask = 1;
pub const WGPUColorWriteMask_Green: WGPUColorWriteMask = 2;
pub const WGPUColorWriteMask_Blue: WGPUColorWriteMask = 4;
pub const WGPUColorWriteMask_Alpha: WGPUColorWriteMask = 8;
pub const WGPUColorWriteMask_All: WGPUColorWriteMask = 15;
pub type WGPUMapMode = WGPUFlags;
pub const WGPUMapMode_None: WGPUMapMode = 0;
pub const WGPUMapMode_Read: WGPUMapMode = 1;
pub const WGPUMapMode_Write: WGPUMapMode = 2;
pub type WGPUShaderStage = WGPUFlags;
pub const WGPUShaderStage_None: WGPUShaderStage = 0;
pub const WGPUShaderStage_Vertex: WGPUShaderStage = 1;
pub const WGPUShaderStage_Fragment: WGPUShaderStage = 2;
pub const WGPUShaderStage_Compute: WGPUShaderStage = 4;
pub type WGPUTextureUsage = WGPUFlags;
pub const WGPUTextureUsage_None: WGPUTextureUsage = 0;
pub const WGPUTextureUsage_CopySrc: WGPUTextureUsage = 1;
pub const WGPUTextureUsage_CopyDst: WGPUTextureUsage = 2;
pub const WGPUTextureUsage_TextureBinding: WGPUTextureUsage = 4;
pub const WGPUTextureUsage_StorageBinding: WGPUTextureUsage = 8;
pub const WGPUTextureUsage_RenderAttachment: WGPUTextureUsage = 16;
pub type WGPUProc = ::core::option::Option<unsafe extern "C" fn()>;
pub type WGPUBufferMapCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUMapAsyncStatus,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUCompilationInfoCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUCompilationInfoRequestStatus,
        compilationInfo: *const WGPUCompilationInfo,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUCreateComputePipelineAsyncCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUCreatePipelineAsyncStatus,
        pipeline: WGPUComputePipeline,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUCreateRenderPipelineAsyncCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUCreatePipelineAsyncStatus,
        pipeline: WGPURenderPipeline,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUDeviceLostCallback = ::core::option::Option<
    unsafe extern "C" fn(
        device: *const WGPUDevice,
        reason: WGPUDeviceLostReason,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUPopErrorScopeCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUPopErrorScopeStatus,
        type_: WGPUErrorType,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUQueueWorkDoneCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUQueueWorkDoneStatus,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPURequestAdapterCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPURequestAdapterStatus,
        adapter: WGPUAdapter,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPURequestDeviceCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPURequestDeviceStatus,
        device: WGPUDevice,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
pub type WGPUUncapturedErrorCallback = ::core::option::Option<
    unsafe extern "C" fn(
        device: *const WGPUDevice,
        type_: WGPUErrorType,
        message: WGPUStringView,
        userdata1: *mut ::core::ffi::c_void,
        userdata2: *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUChainedStruct {
    pub next: *mut WGPUChainedStruct,
    pub sType: WGPUSType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUChainedStruct"][::core::mem::size_of::<WGPUChainedStruct>() - 16usize];
    ["Alignment of WGPUChainedStruct"][::core::mem::align_of::<WGPUChainedStruct>() - 8usize];
    ["Offset of field: WGPUChainedStruct::next"]
        [::core::mem::offset_of!(WGPUChainedStruct, next) - 0usize];
    ["Offset of field: WGPUChainedStruct::sType"]
        [::core::mem::offset_of!(WGPUChainedStruct, sType) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferMapCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUBufferMapCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBufferMapCallbackInfo"]
        [::core::mem::size_of::<WGPUBufferMapCallbackInfo>() - 40usize];
    ["Alignment of WGPUBufferMapCallbackInfo"]
        [::core::mem::align_of::<WGPUBufferMapCallbackInfo>() - 8usize];
    ["Offset of field: WGPUBufferMapCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUBufferMapCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUBufferMapCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUBufferMapCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUBufferMapCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUBufferMapCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUBufferMapCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUBufferMapCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUBufferMapCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUBufferMapCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCompilationInfoCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUCompilationInfoCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCompilationInfoCallbackInfo"]
        [::core::mem::size_of::<WGPUCompilationInfoCallbackInfo>() - 40usize];
    ["Alignment of WGPUCompilationInfoCallbackInfo"]
        [::core::mem::align_of::<WGPUCompilationInfoCallbackInfo>() - 8usize];
    ["Offset of field: WGPUCompilationInfoCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUCompilationInfoCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUCompilationInfoCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUCompilationInfoCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUCompilationInfoCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUCompilationInfoCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUCompilationInfoCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUCompilationInfoCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUCompilationInfoCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUCompilationInfoCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCreateComputePipelineAsyncCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUCreateComputePipelineAsyncCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCreateComputePipelineAsyncCallbackInfo"]
        [::core::mem::size_of::<WGPUCreateComputePipelineAsyncCallbackInfo>() - 40usize];
    ["Alignment of WGPUCreateComputePipelineAsyncCallbackInfo"]
        [::core::mem::align_of::<WGPUCreateComputePipelineAsyncCallbackInfo>() - 8usize];
    ["Offset of field: WGPUCreateComputePipelineAsyncCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUCreateComputePipelineAsyncCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUCreateComputePipelineAsyncCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUCreateComputePipelineAsyncCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUCreateComputePipelineAsyncCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUCreateComputePipelineAsyncCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUCreateComputePipelineAsyncCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUCreateComputePipelineAsyncCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUCreateComputePipelineAsyncCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUCreateComputePipelineAsyncCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCreateRenderPipelineAsyncCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUCreateRenderPipelineAsyncCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCreateRenderPipelineAsyncCallbackInfo"]
        [::core::mem::size_of::<WGPUCreateRenderPipelineAsyncCallbackInfo>() - 40usize];
    ["Alignment of WGPUCreateRenderPipelineAsyncCallbackInfo"]
        [::core::mem::align_of::<WGPUCreateRenderPipelineAsyncCallbackInfo>() - 8usize];
    ["Offset of field: WGPUCreateRenderPipelineAsyncCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUCreateRenderPipelineAsyncCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUCreateRenderPipelineAsyncCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUCreateRenderPipelineAsyncCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUCreateRenderPipelineAsyncCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUCreateRenderPipelineAsyncCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUCreateRenderPipelineAsyncCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUCreateRenderPipelineAsyncCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUCreateRenderPipelineAsyncCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUCreateRenderPipelineAsyncCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceLostCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUDeviceLostCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUDeviceLostCallbackInfo"]
        [::core::mem::size_of::<WGPUDeviceLostCallbackInfo>() - 40usize];
    ["Alignment of WGPUDeviceLostCallbackInfo"]
        [::core::mem::align_of::<WGPUDeviceLostCallbackInfo>() - 8usize];
    ["Offset of field: WGPUDeviceLostCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUDeviceLostCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUDeviceLostCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUDeviceLostCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUDeviceLostCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUDeviceLostCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUDeviceLostCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUDeviceLostCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUDeviceLostCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUDeviceLostCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPopErrorScopeCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUPopErrorScopeCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUPopErrorScopeCallbackInfo"]
        [::core::mem::size_of::<WGPUPopErrorScopeCallbackInfo>() - 40usize];
    ["Alignment of WGPUPopErrorScopeCallbackInfo"]
        [::core::mem::align_of::<WGPUPopErrorScopeCallbackInfo>() - 8usize];
    ["Offset of field: WGPUPopErrorScopeCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUPopErrorScopeCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUPopErrorScopeCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUPopErrorScopeCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUPopErrorScopeCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUPopErrorScopeCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUPopErrorScopeCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUPopErrorScopeCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUPopErrorScopeCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUPopErrorScopeCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQueueWorkDoneCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPUQueueWorkDoneCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUQueueWorkDoneCallbackInfo"]
        [::core::mem::size_of::<WGPUQueueWorkDoneCallbackInfo>() - 40usize];
    ["Alignment of WGPUQueueWorkDoneCallbackInfo"]
        [::core::mem::align_of::<WGPUQueueWorkDoneCallbackInfo>() - 8usize];
    ["Offset of field: WGPUQueueWorkDoneCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUQueueWorkDoneCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUQueueWorkDoneCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPUQueueWorkDoneCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPUQueueWorkDoneCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUQueueWorkDoneCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPUQueueWorkDoneCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUQueueWorkDoneCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPUQueueWorkDoneCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUQueueWorkDoneCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURequestAdapterCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPURequestAdapterCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURequestAdapterCallbackInfo"]
        [::core::mem::size_of::<WGPURequestAdapterCallbackInfo>() - 40usize];
    ["Alignment of WGPURequestAdapterCallbackInfo"]
        [::core::mem::align_of::<WGPURequestAdapterCallbackInfo>() - 8usize];
    ["Offset of field: WGPURequestAdapterCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPURequestAdapterCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPURequestAdapterCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPURequestAdapterCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPURequestAdapterCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPURequestAdapterCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPURequestAdapterCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPURequestAdapterCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPURequestAdapterCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPURequestAdapterCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURequestDeviceCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub mode: WGPUCallbackMode,
    pub callback: WGPURequestDeviceCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURequestDeviceCallbackInfo"]
        [::core::mem::size_of::<WGPURequestDeviceCallbackInfo>() - 40usize];
    ["Alignment of WGPURequestDeviceCallbackInfo"]
        [::core::mem::align_of::<WGPURequestDeviceCallbackInfo>() - 8usize];
    ["Offset of field: WGPURequestDeviceCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPURequestDeviceCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPURequestDeviceCallbackInfo::mode"]
        [::core::mem::offset_of!(WGPURequestDeviceCallbackInfo, mode) - 8usize];
    ["Offset of field: WGPURequestDeviceCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPURequestDeviceCallbackInfo, callback) - 16usize];
    ["Offset of field: WGPURequestDeviceCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPURequestDeviceCallbackInfo, userdata1) - 24usize];
    ["Offset of field: WGPURequestDeviceCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPURequestDeviceCallbackInfo, userdata2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUUncapturedErrorCallbackInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub callback: WGPUUncapturedErrorCallback,
    pub userdata1: *mut ::core::ffi::c_void,
    pub userdata2: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUUncapturedErrorCallbackInfo"]
        [::core::mem::size_of::<WGPUUncapturedErrorCallbackInfo>() - 32usize];
    ["Alignment of WGPUUncapturedErrorCallbackInfo"]
        [::core::mem::align_of::<WGPUUncapturedErrorCallbackInfo>() - 8usize];
    ["Offset of field: WGPUUncapturedErrorCallbackInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUUncapturedErrorCallbackInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUUncapturedErrorCallbackInfo::callback"]
        [::core::mem::offset_of!(WGPUUncapturedErrorCallbackInfo, callback) - 8usize];
    ["Offset of field: WGPUUncapturedErrorCallbackInfo::userdata1"]
        [::core::mem::offset_of!(WGPUUncapturedErrorCallbackInfo, userdata1) - 16usize];
    ["Offset of field: WGPUUncapturedErrorCallbackInfo::userdata2"]
        [::core::mem::offset_of!(WGPUUncapturedErrorCallbackInfo, userdata2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub vendor: WGPUStringView,
    pub architecture: WGPUStringView,
    pub device: WGPUStringView,
    pub description: WGPUStringView,
    pub backendType: WGPUBackendType,
    pub adapterType: WGPUAdapterType,
    pub vendorID: u32,
    pub deviceID: u32,
    pub subgroupMinSize: u32,
    pub subgroupMaxSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUAdapterInfo"][::core::mem::size_of::<WGPUAdapterInfo>() - 96usize];
    ["Alignment of WGPUAdapterInfo"][::core::mem::align_of::<WGPUAdapterInfo>() - 8usize];
    ["Offset of field: WGPUAdapterInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUAdapterInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUAdapterInfo::vendor"]
        [::core::mem::offset_of!(WGPUAdapterInfo, vendor) - 8usize];
    ["Offset of field: WGPUAdapterInfo::architecture"]
        [::core::mem::offset_of!(WGPUAdapterInfo, architecture) - 24usize];
    ["Offset of field: WGPUAdapterInfo::device"]
        [::core::mem::offset_of!(WGPUAdapterInfo, device) - 40usize];
    ["Offset of field: WGPUAdapterInfo::description"]
        [::core::mem::offset_of!(WGPUAdapterInfo, description) - 56usize];
    ["Offset of field: WGPUAdapterInfo::backendType"]
        [::core::mem::offset_of!(WGPUAdapterInfo, backendType) - 72usize];
    ["Offset of field: WGPUAdapterInfo::adapterType"]
        [::core::mem::offset_of!(WGPUAdapterInfo, adapterType) - 76usize];
    ["Offset of field: WGPUAdapterInfo::vendorID"]
        [::core::mem::offset_of!(WGPUAdapterInfo, vendorID) - 80usize];
    ["Offset of field: WGPUAdapterInfo::deviceID"]
        [::core::mem::offset_of!(WGPUAdapterInfo, deviceID) - 84usize];
    ["Offset of field: WGPUAdapterInfo::subgroupMinSize"]
        [::core::mem::offset_of!(WGPUAdapterInfo, subgroupMinSize) - 88usize];
    ["Offset of field: WGPUAdapterInfo::subgroupMaxSize"]
        [::core::mem::offset_of!(WGPUAdapterInfo, subgroupMaxSize) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupEntry {
    pub nextInChain: *mut WGPUChainedStruct,
    pub binding: u32,
    pub buffer: WGPUBuffer,
    pub offset: u64,
    pub size: u64,
    pub sampler: WGPUSampler,
    pub textureView: WGPUTextureView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBindGroupEntry"][::core::mem::size_of::<WGPUBindGroupEntry>() - 56usize];
    ["Alignment of WGPUBindGroupEntry"][::core::mem::align_of::<WGPUBindGroupEntry>() - 8usize];
    ["Offset of field: WGPUBindGroupEntry::nextInChain"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, nextInChain) - 0usize];
    ["Offset of field: WGPUBindGroupEntry::binding"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, binding) - 8usize];
    ["Offset of field: WGPUBindGroupEntry::buffer"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, buffer) - 16usize];
    ["Offset of field: WGPUBindGroupEntry::offset"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, offset) - 24usize];
    ["Offset of field: WGPUBindGroupEntry::size"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, size) - 32usize];
    ["Offset of field: WGPUBindGroupEntry::sampler"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, sampler) - 40usize];
    ["Offset of field: WGPUBindGroupEntry::textureView"]
        [::core::mem::offset_of!(WGPUBindGroupEntry, textureView) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBlendComponent {
    pub operation: WGPUBlendOperation,
    pub srcFactor: WGPUBlendFactor,
    pub dstFactor: WGPUBlendFactor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBlendComponent"][::core::mem::size_of::<WGPUBlendComponent>() - 12usize];
    ["Alignment of WGPUBlendComponent"][::core::mem::align_of::<WGPUBlendComponent>() - 4usize];
    ["Offset of field: WGPUBlendComponent::operation"]
        [::core::mem::offset_of!(WGPUBlendComponent, operation) - 0usize];
    ["Offset of field: WGPUBlendComponent::srcFactor"]
        [::core::mem::offset_of!(WGPUBlendComponent, srcFactor) - 4usize];
    ["Offset of field: WGPUBlendComponent::dstFactor"]
        [::core::mem::offset_of!(WGPUBlendComponent, dstFactor) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferBindingLayout {
    pub nextInChain: *mut WGPUChainedStruct,
    pub type_: WGPUBufferBindingType,
    pub hasDynamicOffset: WGPUBool,
    pub minBindingSize: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBufferBindingLayout"]
        [::core::mem::size_of::<WGPUBufferBindingLayout>() - 24usize];
    ["Alignment of WGPUBufferBindingLayout"]
        [::core::mem::align_of::<WGPUBufferBindingLayout>() - 8usize];
    ["Offset of field: WGPUBufferBindingLayout::nextInChain"]
        [::core::mem::offset_of!(WGPUBufferBindingLayout, nextInChain) - 0usize];
    ["Offset of field: WGPUBufferBindingLayout::type_"]
        [::core::mem::offset_of!(WGPUBufferBindingLayout, type_) - 8usize];
    ["Offset of field: WGPUBufferBindingLayout::hasDynamicOffset"]
        [::core::mem::offset_of!(WGPUBufferBindingLayout, hasDynamicOffset) - 12usize];
    ["Offset of field: WGPUBufferBindingLayout::minBindingSize"]
        [::core::mem::offset_of!(WGPUBufferBindingLayout, minBindingSize) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub usage: WGPUBufferUsage,
    pub size: u64,
    pub mappedAtCreation: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBufferDescriptor"][::core::mem::size_of::<WGPUBufferDescriptor>() - 48usize];
    ["Alignment of WGPUBufferDescriptor"][::core::mem::align_of::<WGPUBufferDescriptor>() - 8usize];
    ["Offset of field: WGPUBufferDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUBufferDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUBufferDescriptor::label"]
        [::core::mem::offset_of!(WGPUBufferDescriptor, label) - 8usize];
    ["Offset of field: WGPUBufferDescriptor::usage"]
        [::core::mem::offset_of!(WGPUBufferDescriptor, usage) - 24usize];
    ["Offset of field: WGPUBufferDescriptor::size"]
        [::core::mem::offset_of!(WGPUBufferDescriptor, size) - 32usize];
    ["Offset of field: WGPUBufferDescriptor::mappedAtCreation"]
        [::core::mem::offset_of!(WGPUBufferDescriptor, mappedAtCreation) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUColor {
    pub r: f64,
    pub g: f64,
    pub b: f64,
    pub a: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUColor"][::core::mem::size_of::<WGPUColor>() - 32usize];
    ["Alignment of WGPUColor"][::core::mem::align_of::<WGPUColor>() - 8usize];
    ["Offset of field: WGPUColor::r"][::core::mem::offset_of!(WGPUColor, r) - 0usize];
    ["Offset of field: WGPUColor::g"][::core::mem::offset_of!(WGPUColor, g) - 8usize];
    ["Offset of field: WGPUColor::b"][::core::mem::offset_of!(WGPUColor, b) - 16usize];
    ["Offset of field: WGPUColor::a"][::core::mem::offset_of!(WGPUColor, a) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandBufferDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCommandBufferDescriptor"]
        [::core::mem::size_of::<WGPUCommandBufferDescriptor>() - 24usize];
    ["Alignment of WGPUCommandBufferDescriptor"]
        [::core::mem::align_of::<WGPUCommandBufferDescriptor>() - 8usize];
    ["Offset of field: WGPUCommandBufferDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUCommandBufferDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUCommandBufferDescriptor::label"]
        [::core::mem::offset_of!(WGPUCommandBufferDescriptor, label) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandEncoderDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCommandEncoderDescriptor"]
        [::core::mem::size_of::<WGPUCommandEncoderDescriptor>() - 24usize];
    ["Alignment of WGPUCommandEncoderDescriptor"]
        [::core::mem::align_of::<WGPUCommandEncoderDescriptor>() - 8usize];
    ["Offset of field: WGPUCommandEncoderDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUCommandEncoderDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUCommandEncoderDescriptor::label"]
        [::core::mem::offset_of!(WGPUCommandEncoderDescriptor, label) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCompilationMessage {
    pub nextInChain: *mut WGPUChainedStruct,
    pub message: WGPUStringView,
    pub type_: WGPUCompilationMessageType,
    pub lineNum: u64,
    pub linePos: u64,
    pub offset: u64,
    pub length: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCompilationMessage"][::core::mem::size_of::<WGPUCompilationMessage>() - 64usize];
    ["Alignment of WGPUCompilationMessage"]
        [::core::mem::align_of::<WGPUCompilationMessage>() - 8usize];
    ["Offset of field: WGPUCompilationMessage::nextInChain"]
        [::core::mem::offset_of!(WGPUCompilationMessage, nextInChain) - 0usize];
    ["Offset of field: WGPUCompilationMessage::message"]
        [::core::mem::offset_of!(WGPUCompilationMessage, message) - 8usize];
    ["Offset of field: WGPUCompilationMessage::type_"]
        [::core::mem::offset_of!(WGPUCompilationMessage, type_) - 24usize];
    ["Offset of field: WGPUCompilationMessage::lineNum"]
        [::core::mem::offset_of!(WGPUCompilationMessage, lineNum) - 32usize];
    ["Offset of field: WGPUCompilationMessage::linePos"]
        [::core::mem::offset_of!(WGPUCompilationMessage, linePos) - 40usize];
    ["Offset of field: WGPUCompilationMessage::offset"]
        [::core::mem::offset_of!(WGPUCompilationMessage, offset) - 48usize];
    ["Offset of field: WGPUCompilationMessage::length"]
        [::core::mem::offset_of!(WGPUCompilationMessage, length) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUConstantEntry {
    pub nextInChain: *mut WGPUChainedStruct,
    pub key: WGPUStringView,
    pub value: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUConstantEntry"][::core::mem::size_of::<WGPUConstantEntry>() - 32usize];
    ["Alignment of WGPUConstantEntry"][::core::mem::align_of::<WGPUConstantEntry>() - 8usize];
    ["Offset of field: WGPUConstantEntry::nextInChain"]
        [::core::mem::offset_of!(WGPUConstantEntry, nextInChain) - 0usize];
    ["Offset of field: WGPUConstantEntry::key"]
        [::core::mem::offset_of!(WGPUConstantEntry, key) - 8usize];
    ["Offset of field: WGPUConstantEntry::value"]
        [::core::mem::offset_of!(WGPUConstantEntry, value) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUExtent3D {
    pub width: u32,
    pub height: u32,
    pub depthOrArrayLayers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUExtent3D"][::core::mem::size_of::<WGPUExtent3D>() - 12usize];
    ["Alignment of WGPUExtent3D"][::core::mem::align_of::<WGPUExtent3D>() - 4usize];
    ["Offset of field: WGPUExtent3D::width"][::core::mem::offset_of!(WGPUExtent3D, width) - 0usize];
    ["Offset of field: WGPUExtent3D::height"]
        [::core::mem::offset_of!(WGPUExtent3D, height) - 4usize];
    ["Offset of field: WGPUExtent3D::depthOrArrayLayers"]
        [::core::mem::offset_of!(WGPUExtent3D, depthOrArrayLayers) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUFuture {
    pub id: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUFuture"][::core::mem::size_of::<WGPUFuture>() - 8usize];
    ["Alignment of WGPUFuture"][::core::mem::align_of::<WGPUFuture>() - 8usize];
    ["Offset of field: WGPUFuture::id"][::core::mem::offset_of!(WGPUFuture, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceLimits {
    pub nextInChain: *mut WGPUChainedStruct,
    pub timedWaitAnyMaxCount: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUInstanceLimits"][::core::mem::size_of::<WGPUInstanceLimits>() - 16usize];
    ["Alignment of WGPUInstanceLimits"][::core::mem::align_of::<WGPUInstanceLimits>() - 8usize];
    ["Offset of field: WGPUInstanceLimits::nextInChain"]
        [::core::mem::offset_of!(WGPUInstanceLimits, nextInChain) - 0usize];
    ["Offset of field: WGPUInstanceLimits::timedWaitAnyMaxCount"]
        [::core::mem::offset_of!(WGPUInstanceLimits, timedWaitAnyMaxCount) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPULimits {
    pub nextInChain: *mut WGPUChainedStruct,
    pub maxTextureDimension1D: u32,
    pub maxTextureDimension2D: u32,
    pub maxTextureDimension3D: u32,
    pub maxTextureArrayLayers: u32,
    pub maxBindGroups: u32,
    pub maxBindGroupsPlusVertexBuffers: u32,
    pub maxBindingsPerBindGroup: u32,
    pub maxDynamicUniformBuffersPerPipelineLayout: u32,
    pub maxDynamicStorageBuffersPerPipelineLayout: u32,
    pub maxSampledTexturesPerShaderStage: u32,
    pub maxSamplersPerShaderStage: u32,
    pub maxStorageBuffersPerShaderStage: u32,
    pub maxStorageTexturesPerShaderStage: u32,
    pub maxUniformBuffersPerShaderStage: u32,
    pub maxUniformBufferBindingSize: u64,
    pub maxStorageBufferBindingSize: u64,
    pub minUniformBufferOffsetAlignment: u32,
    pub minStorageBufferOffsetAlignment: u32,
    pub maxVertexBuffers: u32,
    pub maxBufferSize: u64,
    pub maxVertexAttributes: u32,
    pub maxVertexBufferArrayStride: u32,
    pub maxInterStageShaderVariables: u32,
    pub maxColorAttachments: u32,
    pub maxColorAttachmentBytesPerSample: u32,
    pub maxComputeWorkgroupStorageSize: u32,
    pub maxComputeInvocationsPerWorkgroup: u32,
    pub maxComputeWorkgroupSizeX: u32,
    pub maxComputeWorkgroupSizeY: u32,
    pub maxComputeWorkgroupSizeZ: u32,
    pub maxComputeWorkgroupsPerDimension: u32,
    pub maxImmediateSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPULimits"][::core::mem::size_of::<WGPULimits>() - 152usize];
    ["Alignment of WGPULimits"][::core::mem::align_of::<WGPULimits>() - 8usize];
    ["Offset of field: WGPULimits::nextInChain"]
        [::core::mem::offset_of!(WGPULimits, nextInChain) - 0usize];
    ["Offset of field: WGPULimits::maxTextureDimension1D"]
        [::core::mem::offset_of!(WGPULimits, maxTextureDimension1D) - 8usize];
    ["Offset of field: WGPULimits::maxTextureDimension2D"]
        [::core::mem::offset_of!(WGPULimits, maxTextureDimension2D) - 12usize];
    ["Offset of field: WGPULimits::maxTextureDimension3D"]
        [::core::mem::offset_of!(WGPULimits, maxTextureDimension3D) - 16usize];
    ["Offset of field: WGPULimits::maxTextureArrayLayers"]
        [::core::mem::offset_of!(WGPULimits, maxTextureArrayLayers) - 20usize];
    ["Offset of field: WGPULimits::maxBindGroups"]
        [::core::mem::offset_of!(WGPULimits, maxBindGroups) - 24usize];
    ["Offset of field: WGPULimits::maxBindGroupsPlusVertexBuffers"]
        [::core::mem::offset_of!(WGPULimits, maxBindGroupsPlusVertexBuffers) - 28usize];
    ["Offset of field: WGPULimits::maxBindingsPerBindGroup"]
        [::core::mem::offset_of!(WGPULimits, maxBindingsPerBindGroup) - 32usize];
    ["Offset of field: WGPULimits::maxDynamicUniformBuffersPerPipelineLayout"]
        [::core::mem::offset_of!(WGPULimits, maxDynamicUniformBuffersPerPipelineLayout) - 36usize];
    ["Offset of field: WGPULimits::maxDynamicStorageBuffersPerPipelineLayout"]
        [::core::mem::offset_of!(WGPULimits, maxDynamicStorageBuffersPerPipelineLayout) - 40usize];
    ["Offset of field: WGPULimits::maxSampledTexturesPerShaderStage"]
        [::core::mem::offset_of!(WGPULimits, maxSampledTexturesPerShaderStage) - 44usize];
    ["Offset of field: WGPULimits::maxSamplersPerShaderStage"]
        [::core::mem::offset_of!(WGPULimits, maxSamplersPerShaderStage) - 48usize];
    ["Offset of field: WGPULimits::maxStorageBuffersPerShaderStage"]
        [::core::mem::offset_of!(WGPULimits, maxStorageBuffersPerShaderStage) - 52usize];
    ["Offset of field: WGPULimits::maxStorageTexturesPerShaderStage"]
        [::core::mem::offset_of!(WGPULimits, maxStorageTexturesPerShaderStage) - 56usize];
    ["Offset of field: WGPULimits::maxUniformBuffersPerShaderStage"]
        [::core::mem::offset_of!(WGPULimits, maxUniformBuffersPerShaderStage) - 60usize];
    ["Offset of field: WGPULimits::maxUniformBufferBindingSize"]
        [::core::mem::offset_of!(WGPULimits, maxUniformBufferBindingSize) - 64usize];
    ["Offset of field: WGPULimits::maxStorageBufferBindingSize"]
        [::core::mem::offset_of!(WGPULimits, maxStorageBufferBindingSize) - 72usize];
    ["Offset of field: WGPULimits::minUniformBufferOffsetAlignment"]
        [::core::mem::offset_of!(WGPULimits, minUniformBufferOffsetAlignment) - 80usize];
    ["Offset of field: WGPULimits::minStorageBufferOffsetAlignment"]
        [::core::mem::offset_of!(WGPULimits, minStorageBufferOffsetAlignment) - 84usize];
    ["Offset of field: WGPULimits::maxVertexBuffers"]
        [::core::mem::offset_of!(WGPULimits, maxVertexBuffers) - 88usize];
    ["Offset of field: WGPULimits::maxBufferSize"]
        [::core::mem::offset_of!(WGPULimits, maxBufferSize) - 96usize];
    ["Offset of field: WGPULimits::maxVertexAttributes"]
        [::core::mem::offset_of!(WGPULimits, maxVertexAttributes) - 104usize];
    ["Offset of field: WGPULimits::maxVertexBufferArrayStride"]
        [::core::mem::offset_of!(WGPULimits, maxVertexBufferArrayStride) - 108usize];
    ["Offset of field: WGPULimits::maxInterStageShaderVariables"]
        [::core::mem::offset_of!(WGPULimits, maxInterStageShaderVariables) - 112usize];
    ["Offset of field: WGPULimits::maxColorAttachments"]
        [::core::mem::offset_of!(WGPULimits, maxColorAttachments) - 116usize];
    ["Offset of field: WGPULimits::maxColorAttachmentBytesPerSample"]
        [::core::mem::offset_of!(WGPULimits, maxColorAttachmentBytesPerSample) - 120usize];
    ["Offset of field: WGPULimits::maxComputeWorkgroupStorageSize"]
        [::core::mem::offset_of!(WGPULimits, maxComputeWorkgroupStorageSize) - 124usize];
    ["Offset of field: WGPULimits::maxComputeInvocationsPerWorkgroup"]
        [::core::mem::offset_of!(WGPULimits, maxComputeInvocationsPerWorkgroup) - 128usize];
    ["Offset of field: WGPULimits::maxComputeWorkgroupSizeX"]
        [::core::mem::offset_of!(WGPULimits, maxComputeWorkgroupSizeX) - 132usize];
    ["Offset of field: WGPULimits::maxComputeWorkgroupSizeY"]
        [::core::mem::offset_of!(WGPULimits, maxComputeWorkgroupSizeY) - 136usize];
    ["Offset of field: WGPULimits::maxComputeWorkgroupSizeZ"]
        [::core::mem::offset_of!(WGPULimits, maxComputeWorkgroupSizeZ) - 140usize];
    ["Offset of field: WGPULimits::maxComputeWorkgroupsPerDimension"]
        [::core::mem::offset_of!(WGPULimits, maxComputeWorkgroupsPerDimension) - 144usize];
    ["Offset of field: WGPULimits::maxImmediateSize"]
        [::core::mem::offset_of!(WGPULimits, maxImmediateSize) - 148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUMultisampleState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub count: u32,
    pub mask: u32,
    pub alphaToCoverageEnabled: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUMultisampleState"][::core::mem::size_of::<WGPUMultisampleState>() - 24usize];
    ["Alignment of WGPUMultisampleState"][::core::mem::align_of::<WGPUMultisampleState>() - 8usize];
    ["Offset of field: WGPUMultisampleState::nextInChain"]
        [::core::mem::offset_of!(WGPUMultisampleState, nextInChain) - 0usize];
    ["Offset of field: WGPUMultisampleState::count"]
        [::core::mem::offset_of!(WGPUMultisampleState, count) - 8usize];
    ["Offset of field: WGPUMultisampleState::mask"]
        [::core::mem::offset_of!(WGPUMultisampleState, mask) - 12usize];
    ["Offset of field: WGPUMultisampleState::alphaToCoverageEnabled"]
        [::core::mem::offset_of!(WGPUMultisampleState, alphaToCoverageEnabled) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUOrigin3D {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUOrigin3D"][::core::mem::size_of::<WGPUOrigin3D>() - 12usize];
    ["Alignment of WGPUOrigin3D"][::core::mem::align_of::<WGPUOrigin3D>() - 4usize];
    ["Offset of field: WGPUOrigin3D::x"][::core::mem::offset_of!(WGPUOrigin3D, x) - 0usize];
    ["Offset of field: WGPUOrigin3D::y"][::core::mem::offset_of!(WGPUOrigin3D, y) - 4usize];
    ["Offset of field: WGPUOrigin3D::z"][::core::mem::offset_of!(WGPUOrigin3D, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPassTimestampWrites {
    pub nextInChain: *mut WGPUChainedStruct,
    pub querySet: WGPUQuerySet,
    pub beginningOfPassWriteIndex: u32,
    pub endOfPassWriteIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUPassTimestampWrites"]
        [::core::mem::size_of::<WGPUPassTimestampWrites>() - 24usize];
    ["Alignment of WGPUPassTimestampWrites"]
        [::core::mem::align_of::<WGPUPassTimestampWrites>() - 8usize];
    ["Offset of field: WGPUPassTimestampWrites::nextInChain"]
        [::core::mem::offset_of!(WGPUPassTimestampWrites, nextInChain) - 0usize];
    ["Offset of field: WGPUPassTimestampWrites::querySet"]
        [::core::mem::offset_of!(WGPUPassTimestampWrites, querySet) - 8usize];
    ["Offset of field: WGPUPassTimestampWrites::beginningOfPassWriteIndex"]
        [::core::mem::offset_of!(WGPUPassTimestampWrites, beginningOfPassWriteIndex) - 16usize];
    ["Offset of field: WGPUPassTimestampWrites::endOfPassWriteIndex"]
        [::core::mem::offset_of!(WGPUPassTimestampWrites, endOfPassWriteIndex) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPipelineLayoutDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub bindGroupLayoutCount: usize,
    pub bindGroupLayouts: *const WGPUBindGroupLayout,
    pub immediateSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUPipelineLayoutDescriptor"]
        [::core::mem::size_of::<WGPUPipelineLayoutDescriptor>() - 48usize];
    ["Alignment of WGPUPipelineLayoutDescriptor"]
        [::core::mem::align_of::<WGPUPipelineLayoutDescriptor>() - 8usize];
    ["Offset of field: WGPUPipelineLayoutDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUPipelineLayoutDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUPipelineLayoutDescriptor::label"]
        [::core::mem::offset_of!(WGPUPipelineLayoutDescriptor, label) - 8usize];
    ["Offset of field: WGPUPipelineLayoutDescriptor::bindGroupLayoutCount"]
        [::core::mem::offset_of!(WGPUPipelineLayoutDescriptor, bindGroupLayoutCount) - 24usize];
    ["Offset of field: WGPUPipelineLayoutDescriptor::bindGroupLayouts"]
        [::core::mem::offset_of!(WGPUPipelineLayoutDescriptor, bindGroupLayouts) - 32usize];
    ["Offset of field: WGPUPipelineLayoutDescriptor::immediateSize"]
        [::core::mem::offset_of!(WGPUPipelineLayoutDescriptor, immediateSize) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPrimitiveState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub topology: WGPUPrimitiveTopology,
    pub stripIndexFormat: WGPUIndexFormat,
    pub frontFace: WGPUFrontFace,
    pub cullMode: WGPUCullMode,
    pub unclippedDepth: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUPrimitiveState"][::core::mem::size_of::<WGPUPrimitiveState>() - 32usize];
    ["Alignment of WGPUPrimitiveState"][::core::mem::align_of::<WGPUPrimitiveState>() - 8usize];
    ["Offset of field: WGPUPrimitiveState::nextInChain"]
        [::core::mem::offset_of!(WGPUPrimitiveState, nextInChain) - 0usize];
    ["Offset of field: WGPUPrimitiveState::topology"]
        [::core::mem::offset_of!(WGPUPrimitiveState, topology) - 8usize];
    ["Offset of field: WGPUPrimitiveState::stripIndexFormat"]
        [::core::mem::offset_of!(WGPUPrimitiveState, stripIndexFormat) - 12usize];
    ["Offset of field: WGPUPrimitiveState::frontFace"]
        [::core::mem::offset_of!(WGPUPrimitiveState, frontFace) - 16usize];
    ["Offset of field: WGPUPrimitiveState::cullMode"]
        [::core::mem::offset_of!(WGPUPrimitiveState, cullMode) - 20usize];
    ["Offset of field: WGPUPrimitiveState::unclippedDepth"]
        [::core::mem::offset_of!(WGPUPrimitiveState, unclippedDepth) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQuerySetDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub type_: WGPUQueryType,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUQuerySetDescriptor"][::core::mem::size_of::<WGPUQuerySetDescriptor>() - 32usize];
    ["Alignment of WGPUQuerySetDescriptor"]
        [::core::mem::align_of::<WGPUQuerySetDescriptor>() - 8usize];
    ["Offset of field: WGPUQuerySetDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUQuerySetDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUQuerySetDescriptor::label"]
        [::core::mem::offset_of!(WGPUQuerySetDescriptor, label) - 8usize];
    ["Offset of field: WGPUQuerySetDescriptor::type_"]
        [::core::mem::offset_of!(WGPUQuerySetDescriptor, type_) - 24usize];
    ["Offset of field: WGPUQuerySetDescriptor::count"]
        [::core::mem::offset_of!(WGPUQuerySetDescriptor, count) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQueueDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUQueueDescriptor"][::core::mem::size_of::<WGPUQueueDescriptor>() - 24usize];
    ["Alignment of WGPUQueueDescriptor"][::core::mem::align_of::<WGPUQueueDescriptor>() - 8usize];
    ["Offset of field: WGPUQueueDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUQueueDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUQueueDescriptor::label"]
        [::core::mem::offset_of!(WGPUQueueDescriptor, label) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderBundleDescriptor"]
        [::core::mem::size_of::<WGPURenderBundleDescriptor>() - 24usize];
    ["Alignment of WGPURenderBundleDescriptor"]
        [::core::mem::align_of::<WGPURenderBundleDescriptor>() - 8usize];
    ["Offset of field: WGPURenderBundleDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPURenderBundleDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPURenderBundleDescriptor::label"]
        [::core::mem::offset_of!(WGPURenderBundleDescriptor, label) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleEncoderDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub colorFormatCount: usize,
    pub colorFormats: *const WGPUTextureFormat,
    pub depthStencilFormat: WGPUTextureFormat,
    pub sampleCount: u32,
    pub depthReadOnly: WGPUBool,
    pub stencilReadOnly: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderBundleEncoderDescriptor"]
        [::core::mem::size_of::<WGPURenderBundleEncoderDescriptor>() - 56usize];
    ["Alignment of WGPURenderBundleEncoderDescriptor"]
        [::core::mem::align_of::<WGPURenderBundleEncoderDescriptor>() - 8usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::label"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, label) - 8usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::colorFormatCount"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, colorFormatCount) - 24usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::colorFormats"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, colorFormats) - 32usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::depthStencilFormat"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, depthStencilFormat) - 40usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::sampleCount"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, sampleCount) - 44usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::depthReadOnly"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, depthReadOnly) - 48usize];
    ["Offset of field: WGPURenderBundleEncoderDescriptor::stencilReadOnly"]
        [::core::mem::offset_of!(WGPURenderBundleEncoderDescriptor, stencilReadOnly) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassDepthStencilAttachment {
    pub nextInChain: *mut WGPUChainedStruct,
    pub view: WGPUTextureView,
    pub depthLoadOp: WGPULoadOp,
    pub depthStoreOp: WGPUStoreOp,
    pub depthClearValue: f32,
    pub depthReadOnly: WGPUBool,
    pub stencilLoadOp: WGPULoadOp,
    pub stencilStoreOp: WGPUStoreOp,
    pub stencilClearValue: u32,
    pub stencilReadOnly: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderPassDepthStencilAttachment"]
        [::core::mem::size_of::<WGPURenderPassDepthStencilAttachment>() - 48usize];
    ["Alignment of WGPURenderPassDepthStencilAttachment"]
        [::core::mem::align_of::<WGPURenderPassDepthStencilAttachment>() - 8usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::nextInChain"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, nextInChain) - 0usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::view"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, view) - 8usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::depthLoadOp"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, depthLoadOp) - 16usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::depthStoreOp"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, depthStoreOp) - 20usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::depthClearValue"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, depthClearValue) - 24usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::depthReadOnly"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, depthReadOnly) - 28usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::stencilLoadOp"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, stencilLoadOp) - 32usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::stencilStoreOp"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, stencilStoreOp) - 36usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::stencilClearValue"][::core::mem::offset_of!(
        WGPURenderPassDepthStencilAttachment,
        stencilClearValue
    ) - 40usize];
    ["Offset of field: WGPURenderPassDepthStencilAttachment::stencilReadOnly"]
        [::core::mem::offset_of!(WGPURenderPassDepthStencilAttachment, stencilReadOnly) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassMaxDrawCount {
    pub chain: WGPUChainedStruct,
    pub maxDrawCount: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderPassMaxDrawCount"]
        [::core::mem::size_of::<WGPURenderPassMaxDrawCount>() - 24usize];
    ["Alignment of WGPURenderPassMaxDrawCount"]
        [::core::mem::align_of::<WGPURenderPassMaxDrawCount>() - 8usize];
    ["Offset of field: WGPURenderPassMaxDrawCount::chain"]
        [::core::mem::offset_of!(WGPURenderPassMaxDrawCount, chain) - 0usize];
    ["Offset of field: WGPURenderPassMaxDrawCount::maxDrawCount"]
        [::core::mem::offset_of!(WGPURenderPassMaxDrawCount, maxDrawCount) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURequestAdapterWebXROptions {
    pub chain: WGPUChainedStruct,
    pub xrCompatible: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURequestAdapterWebXROptions"]
        [::core::mem::size_of::<WGPURequestAdapterWebXROptions>() - 24usize];
    ["Alignment of WGPURequestAdapterWebXROptions"]
        [::core::mem::align_of::<WGPURequestAdapterWebXROptions>() - 8usize];
    ["Offset of field: WGPURequestAdapterWebXROptions::chain"]
        [::core::mem::offset_of!(WGPURequestAdapterWebXROptions, chain) - 0usize];
    ["Offset of field: WGPURequestAdapterWebXROptions::xrCompatible"]
        [::core::mem::offset_of!(WGPURequestAdapterWebXROptions, xrCompatible) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerBindingLayout {
    pub nextInChain: *mut WGPUChainedStruct,
    pub type_: WGPUSamplerBindingType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSamplerBindingLayout"]
        [::core::mem::size_of::<WGPUSamplerBindingLayout>() - 16usize];
    ["Alignment of WGPUSamplerBindingLayout"]
        [::core::mem::align_of::<WGPUSamplerBindingLayout>() - 8usize];
    ["Offset of field: WGPUSamplerBindingLayout::nextInChain"]
        [::core::mem::offset_of!(WGPUSamplerBindingLayout, nextInChain) - 0usize];
    ["Offset of field: WGPUSamplerBindingLayout::type_"]
        [::core::mem::offset_of!(WGPUSamplerBindingLayout, type_) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub addressModeU: WGPUAddressMode,
    pub addressModeV: WGPUAddressMode,
    pub addressModeW: WGPUAddressMode,
    pub magFilter: WGPUFilterMode,
    pub minFilter: WGPUFilterMode,
    pub mipmapFilter: WGPUMipmapFilterMode,
    pub lodMinClamp: f32,
    pub lodMaxClamp: f32,
    pub compare: WGPUCompareFunction,
    pub maxAnisotropy: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSamplerDescriptor"][::core::mem::size_of::<WGPUSamplerDescriptor>() - 64usize];
    ["Alignment of WGPUSamplerDescriptor"]
        [::core::mem::align_of::<WGPUSamplerDescriptor>() - 8usize];
    ["Offset of field: WGPUSamplerDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUSamplerDescriptor::label"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, label) - 8usize];
    ["Offset of field: WGPUSamplerDescriptor::addressModeU"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, addressModeU) - 24usize];
    ["Offset of field: WGPUSamplerDescriptor::addressModeV"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, addressModeV) - 28usize];
    ["Offset of field: WGPUSamplerDescriptor::addressModeW"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, addressModeW) - 32usize];
    ["Offset of field: WGPUSamplerDescriptor::magFilter"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, magFilter) - 36usize];
    ["Offset of field: WGPUSamplerDescriptor::minFilter"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, minFilter) - 40usize];
    ["Offset of field: WGPUSamplerDescriptor::mipmapFilter"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, mipmapFilter) - 44usize];
    ["Offset of field: WGPUSamplerDescriptor::lodMinClamp"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, lodMinClamp) - 48usize];
    ["Offset of field: WGPUSamplerDescriptor::lodMaxClamp"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, lodMaxClamp) - 52usize];
    ["Offset of field: WGPUSamplerDescriptor::compare"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, compare) - 56usize];
    ["Offset of field: WGPUSamplerDescriptor::maxAnisotropy"]
        [::core::mem::offset_of!(WGPUSamplerDescriptor, maxAnisotropy) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderSourceSPIRV {
    pub chain: WGPUChainedStruct,
    pub codeSize: u32,
    pub code: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUShaderSourceSPIRV"][::core::mem::size_of::<WGPUShaderSourceSPIRV>() - 32usize];
    ["Alignment of WGPUShaderSourceSPIRV"]
        [::core::mem::align_of::<WGPUShaderSourceSPIRV>() - 8usize];
    ["Offset of field: WGPUShaderSourceSPIRV::chain"]
        [::core::mem::offset_of!(WGPUShaderSourceSPIRV, chain) - 0usize];
    ["Offset of field: WGPUShaderSourceSPIRV::codeSize"]
        [::core::mem::offset_of!(WGPUShaderSourceSPIRV, codeSize) - 16usize];
    ["Offset of field: WGPUShaderSourceSPIRV::code"]
        [::core::mem::offset_of!(WGPUShaderSourceSPIRV, code) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderSourceWGSL {
    pub chain: WGPUChainedStruct,
    pub code: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUShaderSourceWGSL"][::core::mem::size_of::<WGPUShaderSourceWGSL>() - 32usize];
    ["Alignment of WGPUShaderSourceWGSL"][::core::mem::align_of::<WGPUShaderSourceWGSL>() - 8usize];
    ["Offset of field: WGPUShaderSourceWGSL::chain"]
        [::core::mem::offset_of!(WGPUShaderSourceWGSL, chain) - 0usize];
    ["Offset of field: WGPUShaderSourceWGSL::code"]
        [::core::mem::offset_of!(WGPUShaderSourceWGSL, code) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUStencilFaceState {
    pub compare: WGPUCompareFunction,
    pub failOp: WGPUStencilOperation,
    pub depthFailOp: WGPUStencilOperation,
    pub passOp: WGPUStencilOperation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUStencilFaceState"][::core::mem::size_of::<WGPUStencilFaceState>() - 16usize];
    ["Alignment of WGPUStencilFaceState"][::core::mem::align_of::<WGPUStencilFaceState>() - 4usize];
    ["Offset of field: WGPUStencilFaceState::compare"]
        [::core::mem::offset_of!(WGPUStencilFaceState, compare) - 0usize];
    ["Offset of field: WGPUStencilFaceState::failOp"]
        [::core::mem::offset_of!(WGPUStencilFaceState, failOp) - 4usize];
    ["Offset of field: WGPUStencilFaceState::depthFailOp"]
        [::core::mem::offset_of!(WGPUStencilFaceState, depthFailOp) - 8usize];
    ["Offset of field: WGPUStencilFaceState::passOp"]
        [::core::mem::offset_of!(WGPUStencilFaceState, passOp) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUStorageTextureBindingLayout {
    pub nextInChain: *mut WGPUChainedStruct,
    pub access: WGPUStorageTextureAccess,
    pub format: WGPUTextureFormat,
    pub viewDimension: WGPUTextureViewDimension,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUStorageTextureBindingLayout"]
        [::core::mem::size_of::<WGPUStorageTextureBindingLayout>() - 24usize];
    ["Alignment of WGPUStorageTextureBindingLayout"]
        [::core::mem::align_of::<WGPUStorageTextureBindingLayout>() - 8usize];
    ["Offset of field: WGPUStorageTextureBindingLayout::nextInChain"]
        [::core::mem::offset_of!(WGPUStorageTextureBindingLayout, nextInChain) - 0usize];
    ["Offset of field: WGPUStorageTextureBindingLayout::access"]
        [::core::mem::offset_of!(WGPUStorageTextureBindingLayout, access) - 8usize];
    ["Offset of field: WGPUStorageTextureBindingLayout::format"]
        [::core::mem::offset_of!(WGPUStorageTextureBindingLayout, format) - 12usize];
    ["Offset of field: WGPUStorageTextureBindingLayout::viewDimension"]
        [::core::mem::offset_of!(WGPUStorageTextureBindingLayout, viewDimension) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSupportedFeatures {
    pub featureCount: usize,
    pub features: *const WGPUFeatureName,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSupportedFeatures"][::core::mem::size_of::<WGPUSupportedFeatures>() - 16usize];
    ["Alignment of WGPUSupportedFeatures"]
        [::core::mem::align_of::<WGPUSupportedFeatures>() - 8usize];
    ["Offset of field: WGPUSupportedFeatures::featureCount"]
        [::core::mem::offset_of!(WGPUSupportedFeatures, featureCount) - 0usize];
    ["Offset of field: WGPUSupportedFeatures::features"]
        [::core::mem::offset_of!(WGPUSupportedFeatures, features) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSupportedInstanceFeatures {
    pub featureCount: usize,
    pub features: *const WGPUInstanceFeatureName,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSupportedInstanceFeatures"]
        [::core::mem::size_of::<WGPUSupportedInstanceFeatures>() - 16usize];
    ["Alignment of WGPUSupportedInstanceFeatures"]
        [::core::mem::align_of::<WGPUSupportedInstanceFeatures>() - 8usize];
    ["Offset of field: WGPUSupportedInstanceFeatures::featureCount"]
        [::core::mem::offset_of!(WGPUSupportedInstanceFeatures, featureCount) - 0usize];
    ["Offset of field: WGPUSupportedInstanceFeatures::features"]
        [::core::mem::offset_of!(WGPUSupportedInstanceFeatures, features) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSupportedWGSLLanguageFeatures {
    pub featureCount: usize,
    pub features: *const WGPUWGSLLanguageFeatureName,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSupportedWGSLLanguageFeatures"]
        [::core::mem::size_of::<WGPUSupportedWGSLLanguageFeatures>() - 16usize];
    ["Alignment of WGPUSupportedWGSLLanguageFeatures"]
        [::core::mem::align_of::<WGPUSupportedWGSLLanguageFeatures>() - 8usize];
    ["Offset of field: WGPUSupportedWGSLLanguageFeatures::featureCount"]
        [::core::mem::offset_of!(WGPUSupportedWGSLLanguageFeatures, featureCount) - 0usize];
    ["Offset of field: WGPUSupportedWGSLLanguageFeatures::features"]
        [::core::mem::offset_of!(WGPUSupportedWGSLLanguageFeatures, features) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceCapabilities {
    pub nextInChain: *mut WGPUChainedStruct,
    pub usages: WGPUTextureUsage,
    pub formatCount: usize,
    pub formats: *const WGPUTextureFormat,
    pub presentModeCount: usize,
    pub presentModes: *const WGPUPresentMode,
    pub alphaModeCount: usize,
    pub alphaModes: *const WGPUCompositeAlphaMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceCapabilities"]
        [::core::mem::size_of::<WGPUSurfaceCapabilities>() - 64usize];
    ["Alignment of WGPUSurfaceCapabilities"]
        [::core::mem::align_of::<WGPUSurfaceCapabilities>() - 8usize];
    ["Offset of field: WGPUSurfaceCapabilities::nextInChain"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, nextInChain) - 0usize];
    ["Offset of field: WGPUSurfaceCapabilities::usages"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, usages) - 8usize];
    ["Offset of field: WGPUSurfaceCapabilities::formatCount"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, formatCount) - 16usize];
    ["Offset of field: WGPUSurfaceCapabilities::formats"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, formats) - 24usize];
    ["Offset of field: WGPUSurfaceCapabilities::presentModeCount"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, presentModeCount) - 32usize];
    ["Offset of field: WGPUSurfaceCapabilities::presentModes"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, presentModes) - 40usize];
    ["Offset of field: WGPUSurfaceCapabilities::alphaModeCount"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, alphaModeCount) - 48usize];
    ["Offset of field: WGPUSurfaceCapabilities::alphaModes"]
        [::core::mem::offset_of!(WGPUSurfaceCapabilities, alphaModes) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceColorManagement {
    pub chain: WGPUChainedStruct,
    pub colorSpace: WGPUPredefinedColorSpace,
    pub toneMappingMode: WGPUToneMappingMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceColorManagement"]
        [::core::mem::size_of::<WGPUSurfaceColorManagement>() - 24usize];
    ["Alignment of WGPUSurfaceColorManagement"]
        [::core::mem::align_of::<WGPUSurfaceColorManagement>() - 8usize];
    ["Offset of field: WGPUSurfaceColorManagement::chain"]
        [::core::mem::offset_of!(WGPUSurfaceColorManagement, chain) - 0usize];
    ["Offset of field: WGPUSurfaceColorManagement::colorSpace"]
        [::core::mem::offset_of!(WGPUSurfaceColorManagement, colorSpace) - 16usize];
    ["Offset of field: WGPUSurfaceColorManagement::toneMappingMode"]
        [::core::mem::offset_of!(WGPUSurfaceColorManagement, toneMappingMode) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceConfiguration {
    pub nextInChain: *mut WGPUChainedStruct,
    pub device: WGPUDevice,
    pub format: WGPUTextureFormat,
    pub usage: WGPUTextureUsage,
    pub width: u32,
    pub height: u32,
    pub viewFormatCount: usize,
    pub viewFormats: *const WGPUTextureFormat,
    pub alphaMode: WGPUCompositeAlphaMode,
    pub presentMode: WGPUPresentMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceConfiguration"]
        [::core::mem::size_of::<WGPUSurfaceConfiguration>() - 64usize];
    ["Alignment of WGPUSurfaceConfiguration"]
        [::core::mem::align_of::<WGPUSurfaceConfiguration>() - 8usize];
    ["Offset of field: WGPUSurfaceConfiguration::nextInChain"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, nextInChain) - 0usize];
    ["Offset of field: WGPUSurfaceConfiguration::device"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, device) - 8usize];
    ["Offset of field: WGPUSurfaceConfiguration::format"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, format) - 16usize];
    ["Offset of field: WGPUSurfaceConfiguration::usage"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, usage) - 24usize];
    ["Offset of field: WGPUSurfaceConfiguration::width"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, width) - 32usize];
    ["Offset of field: WGPUSurfaceConfiguration::height"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, height) - 36usize];
    ["Offset of field: WGPUSurfaceConfiguration::viewFormatCount"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, viewFormatCount) - 40usize];
    ["Offset of field: WGPUSurfaceConfiguration::viewFormats"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, viewFormats) - 48usize];
    ["Offset of field: WGPUSurfaceConfiguration::alphaMode"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, alphaMode) - 56usize];
    ["Offset of field: WGPUSurfaceConfiguration::presentMode"]
        [::core::mem::offset_of!(WGPUSurfaceConfiguration, presentMode) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceSourceAndroidNativeWindow {
    pub chain: WGPUChainedStruct,
    pub window: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceSourceAndroidNativeWindow"]
        [::core::mem::size_of::<WGPUSurfaceSourceAndroidNativeWindow>() - 24usize];
    ["Alignment of WGPUSurfaceSourceAndroidNativeWindow"]
        [::core::mem::align_of::<WGPUSurfaceSourceAndroidNativeWindow>() - 8usize];
    ["Offset of field: WGPUSurfaceSourceAndroidNativeWindow::chain"]
        [::core::mem::offset_of!(WGPUSurfaceSourceAndroidNativeWindow, chain) - 0usize];
    ["Offset of field: WGPUSurfaceSourceAndroidNativeWindow::window"]
        [::core::mem::offset_of!(WGPUSurfaceSourceAndroidNativeWindow, window) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceSourceMetalLayer {
    pub chain: WGPUChainedStruct,
    pub layer: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceSourceMetalLayer"]
        [::core::mem::size_of::<WGPUSurfaceSourceMetalLayer>() - 24usize];
    ["Alignment of WGPUSurfaceSourceMetalLayer"]
        [::core::mem::align_of::<WGPUSurfaceSourceMetalLayer>() - 8usize];
    ["Offset of field: WGPUSurfaceSourceMetalLayer::chain"]
        [::core::mem::offset_of!(WGPUSurfaceSourceMetalLayer, chain) - 0usize];
    ["Offset of field: WGPUSurfaceSourceMetalLayer::layer"]
        [::core::mem::offset_of!(WGPUSurfaceSourceMetalLayer, layer) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceSourceWaylandSurface {
    pub chain: WGPUChainedStruct,
    pub display: *mut ::core::ffi::c_void,
    pub surface: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceSourceWaylandSurface"]
        [::core::mem::size_of::<WGPUSurfaceSourceWaylandSurface>() - 32usize];
    ["Alignment of WGPUSurfaceSourceWaylandSurface"]
        [::core::mem::align_of::<WGPUSurfaceSourceWaylandSurface>() - 8usize];
    ["Offset of field: WGPUSurfaceSourceWaylandSurface::chain"]
        [::core::mem::offset_of!(WGPUSurfaceSourceWaylandSurface, chain) - 0usize];
    ["Offset of field: WGPUSurfaceSourceWaylandSurface::display"]
        [::core::mem::offset_of!(WGPUSurfaceSourceWaylandSurface, display) - 16usize];
    ["Offset of field: WGPUSurfaceSourceWaylandSurface::surface"]
        [::core::mem::offset_of!(WGPUSurfaceSourceWaylandSurface, surface) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceSourceWindowsHWND {
    pub chain: WGPUChainedStruct,
    pub hinstance: *mut ::core::ffi::c_void,
    pub hwnd: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceSourceWindowsHWND"]
        [::core::mem::size_of::<WGPUSurfaceSourceWindowsHWND>() - 32usize];
    ["Alignment of WGPUSurfaceSourceWindowsHWND"]
        [::core::mem::align_of::<WGPUSurfaceSourceWindowsHWND>() - 8usize];
    ["Offset of field: WGPUSurfaceSourceWindowsHWND::chain"]
        [::core::mem::offset_of!(WGPUSurfaceSourceWindowsHWND, chain) - 0usize];
    ["Offset of field: WGPUSurfaceSourceWindowsHWND::hinstance"]
        [::core::mem::offset_of!(WGPUSurfaceSourceWindowsHWND, hinstance) - 16usize];
    ["Offset of field: WGPUSurfaceSourceWindowsHWND::hwnd"]
        [::core::mem::offset_of!(WGPUSurfaceSourceWindowsHWND, hwnd) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceSourceXCBWindow {
    pub chain: WGPUChainedStruct,
    pub connection: *mut ::core::ffi::c_void,
    pub window: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceSourceXCBWindow"]
        [::core::mem::size_of::<WGPUSurfaceSourceXCBWindow>() - 32usize];
    ["Alignment of WGPUSurfaceSourceXCBWindow"]
        [::core::mem::align_of::<WGPUSurfaceSourceXCBWindow>() - 8usize];
    ["Offset of field: WGPUSurfaceSourceXCBWindow::chain"]
        [::core::mem::offset_of!(WGPUSurfaceSourceXCBWindow, chain) - 0usize];
    ["Offset of field: WGPUSurfaceSourceXCBWindow::connection"]
        [::core::mem::offset_of!(WGPUSurfaceSourceXCBWindow, connection) - 16usize];
    ["Offset of field: WGPUSurfaceSourceXCBWindow::window"]
        [::core::mem::offset_of!(WGPUSurfaceSourceXCBWindow, window) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceSourceXlibWindow {
    pub chain: WGPUChainedStruct,
    pub display: *mut ::core::ffi::c_void,
    pub window: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceSourceXlibWindow"]
        [::core::mem::size_of::<WGPUSurfaceSourceXlibWindow>() - 32usize];
    ["Alignment of WGPUSurfaceSourceXlibWindow"]
        [::core::mem::align_of::<WGPUSurfaceSourceXlibWindow>() - 8usize];
    ["Offset of field: WGPUSurfaceSourceXlibWindow::chain"]
        [::core::mem::offset_of!(WGPUSurfaceSourceXlibWindow, chain) - 0usize];
    ["Offset of field: WGPUSurfaceSourceXlibWindow::display"]
        [::core::mem::offset_of!(WGPUSurfaceSourceXlibWindow, display) - 16usize];
    ["Offset of field: WGPUSurfaceSourceXlibWindow::window"]
        [::core::mem::offset_of!(WGPUSurfaceSourceXlibWindow, window) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceTexture {
    pub nextInChain: *mut WGPUChainedStruct,
    pub texture: WGPUTexture,
    pub status: WGPUSurfaceGetCurrentTextureStatus,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceTexture"][::core::mem::size_of::<WGPUSurfaceTexture>() - 24usize];
    ["Alignment of WGPUSurfaceTexture"][::core::mem::align_of::<WGPUSurfaceTexture>() - 8usize];
    ["Offset of field: WGPUSurfaceTexture::nextInChain"]
        [::core::mem::offset_of!(WGPUSurfaceTexture, nextInChain) - 0usize];
    ["Offset of field: WGPUSurfaceTexture::texture"]
        [::core::mem::offset_of!(WGPUSurfaceTexture, texture) - 8usize];
    ["Offset of field: WGPUSurfaceTexture::status"]
        [::core::mem::offset_of!(WGPUSurfaceTexture, status) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTexelCopyBufferLayout {
    pub offset: u64,
    pub bytesPerRow: u32,
    pub rowsPerImage: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUTexelCopyBufferLayout"]
        [::core::mem::size_of::<WGPUTexelCopyBufferLayout>() - 16usize];
    ["Alignment of WGPUTexelCopyBufferLayout"]
        [::core::mem::align_of::<WGPUTexelCopyBufferLayout>() - 8usize];
    ["Offset of field: WGPUTexelCopyBufferLayout::offset"]
        [::core::mem::offset_of!(WGPUTexelCopyBufferLayout, offset) - 0usize];
    ["Offset of field: WGPUTexelCopyBufferLayout::bytesPerRow"]
        [::core::mem::offset_of!(WGPUTexelCopyBufferLayout, bytesPerRow) - 8usize];
    ["Offset of field: WGPUTexelCopyBufferLayout::rowsPerImage"]
        [::core::mem::offset_of!(WGPUTexelCopyBufferLayout, rowsPerImage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureBindingLayout {
    pub nextInChain: *mut WGPUChainedStruct,
    pub sampleType: WGPUTextureSampleType,
    pub viewDimension: WGPUTextureViewDimension,
    pub multisampled: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUTextureBindingLayout"]
        [::core::mem::size_of::<WGPUTextureBindingLayout>() - 24usize];
    ["Alignment of WGPUTextureBindingLayout"]
        [::core::mem::align_of::<WGPUTextureBindingLayout>() - 8usize];
    ["Offset of field: WGPUTextureBindingLayout::nextInChain"]
        [::core::mem::offset_of!(WGPUTextureBindingLayout, nextInChain) - 0usize];
    ["Offset of field: WGPUTextureBindingLayout::sampleType"]
        [::core::mem::offset_of!(WGPUTextureBindingLayout, sampleType) - 8usize];
    ["Offset of field: WGPUTextureBindingLayout::viewDimension"]
        [::core::mem::offset_of!(WGPUTextureBindingLayout, viewDimension) - 12usize];
    ["Offset of field: WGPUTextureBindingLayout::multisampled"]
        [::core::mem::offset_of!(WGPUTextureBindingLayout, multisampled) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureViewDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub format: WGPUTextureFormat,
    pub dimension: WGPUTextureViewDimension,
    pub baseMipLevel: u32,
    pub mipLevelCount: u32,
    pub baseArrayLayer: u32,
    pub arrayLayerCount: u32,
    pub aspect: WGPUTextureAspect,
    pub usage: WGPUTextureUsage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUTextureViewDescriptor"]
        [::core::mem::size_of::<WGPUTextureViewDescriptor>() - 64usize];
    ["Alignment of WGPUTextureViewDescriptor"]
        [::core::mem::align_of::<WGPUTextureViewDescriptor>() - 8usize];
    ["Offset of field: WGPUTextureViewDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUTextureViewDescriptor::label"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, label) - 8usize];
    ["Offset of field: WGPUTextureViewDescriptor::format"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, format) - 24usize];
    ["Offset of field: WGPUTextureViewDescriptor::dimension"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, dimension) - 28usize];
    ["Offset of field: WGPUTextureViewDescriptor::baseMipLevel"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, baseMipLevel) - 32usize];
    ["Offset of field: WGPUTextureViewDescriptor::mipLevelCount"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, mipLevelCount) - 36usize];
    ["Offset of field: WGPUTextureViewDescriptor::baseArrayLayer"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, baseArrayLayer) - 40usize];
    ["Offset of field: WGPUTextureViewDescriptor::arrayLayerCount"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, arrayLayerCount) - 44usize];
    ["Offset of field: WGPUTextureViewDescriptor::aspect"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, aspect) - 48usize];
    ["Offset of field: WGPUTextureViewDescriptor::usage"]
        [::core::mem::offset_of!(WGPUTextureViewDescriptor, usage) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexAttribute {
    pub nextInChain: *mut WGPUChainedStruct,
    pub format: WGPUVertexFormat,
    pub offset: u64,
    pub shaderLocation: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUVertexAttribute"][::core::mem::size_of::<WGPUVertexAttribute>() - 32usize];
    ["Alignment of WGPUVertexAttribute"][::core::mem::align_of::<WGPUVertexAttribute>() - 8usize];
    ["Offset of field: WGPUVertexAttribute::nextInChain"]
        [::core::mem::offset_of!(WGPUVertexAttribute, nextInChain) - 0usize];
    ["Offset of field: WGPUVertexAttribute::format"]
        [::core::mem::offset_of!(WGPUVertexAttribute, format) - 8usize];
    ["Offset of field: WGPUVertexAttribute::offset"]
        [::core::mem::offset_of!(WGPUVertexAttribute, offset) - 16usize];
    ["Offset of field: WGPUVertexAttribute::shaderLocation"]
        [::core::mem::offset_of!(WGPUVertexAttribute, shaderLocation) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub layout: WGPUBindGroupLayout,
    pub entryCount: usize,
    pub entries: *const WGPUBindGroupEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBindGroupDescriptor"]
        [::core::mem::size_of::<WGPUBindGroupDescriptor>() - 48usize];
    ["Alignment of WGPUBindGroupDescriptor"]
        [::core::mem::align_of::<WGPUBindGroupDescriptor>() - 8usize];
    ["Offset of field: WGPUBindGroupDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUBindGroupDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUBindGroupDescriptor::label"]
        [::core::mem::offset_of!(WGPUBindGroupDescriptor, label) - 8usize];
    ["Offset of field: WGPUBindGroupDescriptor::layout"]
        [::core::mem::offset_of!(WGPUBindGroupDescriptor, layout) - 24usize];
    ["Offset of field: WGPUBindGroupDescriptor::entryCount"]
        [::core::mem::offset_of!(WGPUBindGroupDescriptor, entryCount) - 32usize];
    ["Offset of field: WGPUBindGroupDescriptor::entries"]
        [::core::mem::offset_of!(WGPUBindGroupDescriptor, entries) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutEntry {
    pub nextInChain: *mut WGPUChainedStruct,
    pub binding: u32,
    pub visibility: WGPUShaderStage,
    pub bindingArraySize: u32,
    pub buffer: WGPUBufferBindingLayout,
    pub sampler: WGPUSamplerBindingLayout,
    pub texture: WGPUTextureBindingLayout,
    pub storageTexture: WGPUStorageTextureBindingLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBindGroupLayoutEntry"]
        [::core::mem::size_of::<WGPUBindGroupLayoutEntry>() - 120usize];
    ["Alignment of WGPUBindGroupLayoutEntry"]
        [::core::mem::align_of::<WGPUBindGroupLayoutEntry>() - 8usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::nextInChain"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, nextInChain) - 0usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::binding"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, binding) - 8usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::visibility"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, visibility) - 16usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::bindingArraySize"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, bindingArraySize) - 24usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::buffer"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, buffer) - 32usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::sampler"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, sampler) - 56usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::texture"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, texture) - 72usize];
    ["Offset of field: WGPUBindGroupLayoutEntry::storageTexture"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutEntry, storageTexture) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBlendState {
    pub color: WGPUBlendComponent,
    pub alpha: WGPUBlendComponent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBlendState"][::core::mem::size_of::<WGPUBlendState>() - 24usize];
    ["Alignment of WGPUBlendState"][::core::mem::align_of::<WGPUBlendState>() - 4usize];
    ["Offset of field: WGPUBlendState::color"]
        [::core::mem::offset_of!(WGPUBlendState, color) - 0usize];
    ["Offset of field: WGPUBlendState::alpha"]
        [::core::mem::offset_of!(WGPUBlendState, alpha) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCompilationInfo {
    pub nextInChain: *mut WGPUChainedStruct,
    pub messageCount: usize,
    pub messages: *const WGPUCompilationMessage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUCompilationInfo"][::core::mem::size_of::<WGPUCompilationInfo>() - 24usize];
    ["Alignment of WGPUCompilationInfo"][::core::mem::align_of::<WGPUCompilationInfo>() - 8usize];
    ["Offset of field: WGPUCompilationInfo::nextInChain"]
        [::core::mem::offset_of!(WGPUCompilationInfo, nextInChain) - 0usize];
    ["Offset of field: WGPUCompilationInfo::messageCount"]
        [::core::mem::offset_of!(WGPUCompilationInfo, messageCount) - 8usize];
    ["Offset of field: WGPUCompilationInfo::messages"]
        [::core::mem::offset_of!(WGPUCompilationInfo, messages) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePassDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub timestampWrites: *const WGPUPassTimestampWrites,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUComputePassDescriptor"]
        [::core::mem::size_of::<WGPUComputePassDescriptor>() - 32usize];
    ["Alignment of WGPUComputePassDescriptor"]
        [::core::mem::align_of::<WGPUComputePassDescriptor>() - 8usize];
    ["Offset of field: WGPUComputePassDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUComputePassDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUComputePassDescriptor::label"]
        [::core::mem::offset_of!(WGPUComputePassDescriptor, label) - 8usize];
    ["Offset of field: WGPUComputePassDescriptor::timestampWrites"]
        [::core::mem::offset_of!(WGPUComputePassDescriptor, timestampWrites) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputeState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub module: WGPUShaderModule,
    pub entryPoint: WGPUStringView,
    pub constantCount: usize,
    pub constants: *const WGPUConstantEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUComputeState"][::core::mem::size_of::<WGPUComputeState>() - 48usize];
    ["Alignment of WGPUComputeState"][::core::mem::align_of::<WGPUComputeState>() - 8usize];
    ["Offset of field: WGPUComputeState::nextInChain"]
        [::core::mem::offset_of!(WGPUComputeState, nextInChain) - 0usize];
    ["Offset of field: WGPUComputeState::module"]
        [::core::mem::offset_of!(WGPUComputeState, module) - 8usize];
    ["Offset of field: WGPUComputeState::entryPoint"]
        [::core::mem::offset_of!(WGPUComputeState, entryPoint) - 16usize];
    ["Offset of field: WGPUComputeState::constantCount"]
        [::core::mem::offset_of!(WGPUComputeState, constantCount) - 32usize];
    ["Offset of field: WGPUComputeState::constants"]
        [::core::mem::offset_of!(WGPUComputeState, constants) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDepthStencilState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub format: WGPUTextureFormat,
    pub depthWriteEnabled: WGPUOptionalBool,
    pub depthCompare: WGPUCompareFunction,
    pub stencilFront: WGPUStencilFaceState,
    pub stencilBack: WGPUStencilFaceState,
    pub stencilReadMask: u32,
    pub stencilWriteMask: u32,
    pub depthBias: i32,
    pub depthBiasSlopeScale: f32,
    pub depthBiasClamp: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUDepthStencilState"][::core::mem::size_of::<WGPUDepthStencilState>() - 72usize];
    ["Alignment of WGPUDepthStencilState"]
        [::core::mem::align_of::<WGPUDepthStencilState>() - 8usize];
    ["Offset of field: WGPUDepthStencilState::nextInChain"]
        [::core::mem::offset_of!(WGPUDepthStencilState, nextInChain) - 0usize];
    ["Offset of field: WGPUDepthStencilState::format"]
        [::core::mem::offset_of!(WGPUDepthStencilState, format) - 8usize];
    ["Offset of field: WGPUDepthStencilState::depthWriteEnabled"]
        [::core::mem::offset_of!(WGPUDepthStencilState, depthWriteEnabled) - 12usize];
    ["Offset of field: WGPUDepthStencilState::depthCompare"]
        [::core::mem::offset_of!(WGPUDepthStencilState, depthCompare) - 16usize];
    ["Offset of field: WGPUDepthStencilState::stencilFront"]
        [::core::mem::offset_of!(WGPUDepthStencilState, stencilFront) - 20usize];
    ["Offset of field: WGPUDepthStencilState::stencilBack"]
        [::core::mem::offset_of!(WGPUDepthStencilState, stencilBack) - 36usize];
    ["Offset of field: WGPUDepthStencilState::stencilReadMask"]
        [::core::mem::offset_of!(WGPUDepthStencilState, stencilReadMask) - 52usize];
    ["Offset of field: WGPUDepthStencilState::stencilWriteMask"]
        [::core::mem::offset_of!(WGPUDepthStencilState, stencilWriteMask) - 56usize];
    ["Offset of field: WGPUDepthStencilState::depthBias"]
        [::core::mem::offset_of!(WGPUDepthStencilState, depthBias) - 60usize];
    ["Offset of field: WGPUDepthStencilState::depthBiasSlopeScale"]
        [::core::mem::offset_of!(WGPUDepthStencilState, depthBiasSlopeScale) - 64usize];
    ["Offset of field: WGPUDepthStencilState::depthBiasClamp"]
        [::core::mem::offset_of!(WGPUDepthStencilState, depthBiasClamp) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub requiredFeatureCount: usize,
    pub requiredFeatures: *const WGPUFeatureName,
    pub requiredLimits: *const WGPULimits,
    pub defaultQueue: WGPUQueueDescriptor,
    pub deviceLostCallbackInfo: WGPUDeviceLostCallbackInfo,
    pub uncapturedErrorCallbackInfo: WGPUUncapturedErrorCallbackInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUDeviceDescriptor"][::core::mem::size_of::<WGPUDeviceDescriptor>() - 144usize];
    ["Alignment of WGPUDeviceDescriptor"][::core::mem::align_of::<WGPUDeviceDescriptor>() - 8usize];
    ["Offset of field: WGPUDeviceDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUDeviceDescriptor::label"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, label) - 8usize];
    ["Offset of field: WGPUDeviceDescriptor::requiredFeatureCount"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, requiredFeatureCount) - 24usize];
    ["Offset of field: WGPUDeviceDescriptor::requiredFeatures"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, requiredFeatures) - 32usize];
    ["Offset of field: WGPUDeviceDescriptor::requiredLimits"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, requiredLimits) - 40usize];
    ["Offset of field: WGPUDeviceDescriptor::defaultQueue"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, defaultQueue) - 48usize];
    ["Offset of field: WGPUDeviceDescriptor::deviceLostCallbackInfo"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, deviceLostCallbackInfo) - 72usize];
    ["Offset of field: WGPUDeviceDescriptor::uncapturedErrorCallbackInfo"]
        [::core::mem::offset_of!(WGPUDeviceDescriptor, uncapturedErrorCallbackInfo) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUFutureWaitInfo {
    pub future: WGPUFuture,
    pub completed: WGPUBool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUFutureWaitInfo"][::core::mem::size_of::<WGPUFutureWaitInfo>() - 16usize];
    ["Alignment of WGPUFutureWaitInfo"][::core::mem::align_of::<WGPUFutureWaitInfo>() - 8usize];
    ["Offset of field: WGPUFutureWaitInfo::future"]
        [::core::mem::offset_of!(WGPUFutureWaitInfo, future) - 0usize];
    ["Offset of field: WGPUFutureWaitInfo::completed"]
        [::core::mem::offset_of!(WGPUFutureWaitInfo, completed) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub requiredFeatureCount: usize,
    pub requiredFeatures: *const WGPUInstanceFeatureName,
    pub requiredLimits: *const WGPUInstanceLimits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUInstanceDescriptor"][::core::mem::size_of::<WGPUInstanceDescriptor>() - 32usize];
    ["Alignment of WGPUInstanceDescriptor"]
        [::core::mem::align_of::<WGPUInstanceDescriptor>() - 8usize];
    ["Offset of field: WGPUInstanceDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUInstanceDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUInstanceDescriptor::requiredFeatureCount"]
        [::core::mem::offset_of!(WGPUInstanceDescriptor, requiredFeatureCount) - 8usize];
    ["Offset of field: WGPUInstanceDescriptor::requiredFeatures"]
        [::core::mem::offset_of!(WGPUInstanceDescriptor, requiredFeatures) - 16usize];
    ["Offset of field: WGPUInstanceDescriptor::requiredLimits"]
        [::core::mem::offset_of!(WGPUInstanceDescriptor, requiredLimits) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassColorAttachment {
    pub nextInChain: *mut WGPUChainedStruct,
    pub view: WGPUTextureView,
    pub depthSlice: u32,
    pub resolveTarget: WGPUTextureView,
    pub loadOp: WGPULoadOp,
    pub storeOp: WGPUStoreOp,
    pub clearValue: WGPUColor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderPassColorAttachment"]
        [::core::mem::size_of::<WGPURenderPassColorAttachment>() - 72usize];
    ["Alignment of WGPURenderPassColorAttachment"]
        [::core::mem::align_of::<WGPURenderPassColorAttachment>() - 8usize];
    ["Offset of field: WGPURenderPassColorAttachment::nextInChain"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, nextInChain) - 0usize];
    ["Offset of field: WGPURenderPassColorAttachment::view"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, view) - 8usize];
    ["Offset of field: WGPURenderPassColorAttachment::depthSlice"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, depthSlice) - 16usize];
    ["Offset of field: WGPURenderPassColorAttachment::resolveTarget"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, resolveTarget) - 24usize];
    ["Offset of field: WGPURenderPassColorAttachment::loadOp"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, loadOp) - 32usize];
    ["Offset of field: WGPURenderPassColorAttachment::storeOp"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, storeOp) - 36usize];
    ["Offset of field: WGPURenderPassColorAttachment::clearValue"]
        [::core::mem::offset_of!(WGPURenderPassColorAttachment, clearValue) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURequestAdapterOptions {
    pub nextInChain: *mut WGPUChainedStruct,
    pub featureLevel: WGPUFeatureLevel,
    pub powerPreference: WGPUPowerPreference,
    pub forceFallbackAdapter: WGPUBool,
    pub backendType: WGPUBackendType,
    pub compatibleSurface: WGPUSurface,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURequestAdapterOptions"]
        [::core::mem::size_of::<WGPURequestAdapterOptions>() - 32usize];
    ["Alignment of WGPURequestAdapterOptions"]
        [::core::mem::align_of::<WGPURequestAdapterOptions>() - 8usize];
    ["Offset of field: WGPURequestAdapterOptions::nextInChain"]
        [::core::mem::offset_of!(WGPURequestAdapterOptions, nextInChain) - 0usize];
    ["Offset of field: WGPURequestAdapterOptions::featureLevel"]
        [::core::mem::offset_of!(WGPURequestAdapterOptions, featureLevel) - 8usize];
    ["Offset of field: WGPURequestAdapterOptions::powerPreference"]
        [::core::mem::offset_of!(WGPURequestAdapterOptions, powerPreference) - 12usize];
    ["Offset of field: WGPURequestAdapterOptions::forceFallbackAdapter"]
        [::core::mem::offset_of!(WGPURequestAdapterOptions, forceFallbackAdapter) - 16usize];
    ["Offset of field: WGPURequestAdapterOptions::backendType"]
        [::core::mem::offset_of!(WGPURequestAdapterOptions, backendType) - 20usize];
    ["Offset of field: WGPURequestAdapterOptions::compatibleSurface"]
        [::core::mem::offset_of!(WGPURequestAdapterOptions, compatibleSurface) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUShaderModuleDescriptor"]
        [::core::mem::size_of::<WGPUShaderModuleDescriptor>() - 24usize];
    ["Alignment of WGPUShaderModuleDescriptor"]
        [::core::mem::align_of::<WGPUShaderModuleDescriptor>() - 8usize];
    ["Offset of field: WGPUShaderModuleDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUShaderModuleDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUShaderModuleDescriptor::label"]
        [::core::mem::offset_of!(WGPUShaderModuleDescriptor, label) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUSurfaceDescriptor"][::core::mem::size_of::<WGPUSurfaceDescriptor>() - 24usize];
    ["Alignment of WGPUSurfaceDescriptor"]
        [::core::mem::align_of::<WGPUSurfaceDescriptor>() - 8usize];
    ["Offset of field: WGPUSurfaceDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUSurfaceDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUSurfaceDescriptor::label"]
        [::core::mem::offset_of!(WGPUSurfaceDescriptor, label) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTexelCopyBufferInfo {
    pub layout: WGPUTexelCopyBufferLayout,
    pub buffer: WGPUBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUTexelCopyBufferInfo"]
        [::core::mem::size_of::<WGPUTexelCopyBufferInfo>() - 24usize];
    ["Alignment of WGPUTexelCopyBufferInfo"]
        [::core::mem::align_of::<WGPUTexelCopyBufferInfo>() - 8usize];
    ["Offset of field: WGPUTexelCopyBufferInfo::layout"]
        [::core::mem::offset_of!(WGPUTexelCopyBufferInfo, layout) - 0usize];
    ["Offset of field: WGPUTexelCopyBufferInfo::buffer"]
        [::core::mem::offset_of!(WGPUTexelCopyBufferInfo, buffer) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTexelCopyTextureInfo {
    pub texture: WGPUTexture,
    pub mipLevel: u32,
    pub origin: WGPUOrigin3D,
    pub aspect: WGPUTextureAspect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUTexelCopyTextureInfo"]
        [::core::mem::size_of::<WGPUTexelCopyTextureInfo>() - 32usize];
    ["Alignment of WGPUTexelCopyTextureInfo"]
        [::core::mem::align_of::<WGPUTexelCopyTextureInfo>() - 8usize];
    ["Offset of field: WGPUTexelCopyTextureInfo::texture"]
        [::core::mem::offset_of!(WGPUTexelCopyTextureInfo, texture) - 0usize];
    ["Offset of field: WGPUTexelCopyTextureInfo::mipLevel"]
        [::core::mem::offset_of!(WGPUTexelCopyTextureInfo, mipLevel) - 8usize];
    ["Offset of field: WGPUTexelCopyTextureInfo::origin"]
        [::core::mem::offset_of!(WGPUTexelCopyTextureInfo, origin) - 12usize];
    ["Offset of field: WGPUTexelCopyTextureInfo::aspect"]
        [::core::mem::offset_of!(WGPUTexelCopyTextureInfo, aspect) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub usage: WGPUTextureUsage,
    pub dimension: WGPUTextureDimension,
    pub size: WGPUExtent3D,
    pub format: WGPUTextureFormat,
    pub mipLevelCount: u32,
    pub sampleCount: u32,
    pub viewFormatCount: usize,
    pub viewFormats: *const WGPUTextureFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUTextureDescriptor"][::core::mem::size_of::<WGPUTextureDescriptor>() - 80usize];
    ["Alignment of WGPUTextureDescriptor"]
        [::core::mem::align_of::<WGPUTextureDescriptor>() - 8usize];
    ["Offset of field: WGPUTextureDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUTextureDescriptor::label"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, label) - 8usize];
    ["Offset of field: WGPUTextureDescriptor::usage"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, usage) - 24usize];
    ["Offset of field: WGPUTextureDescriptor::dimension"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, dimension) - 32usize];
    ["Offset of field: WGPUTextureDescriptor::size"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, size) - 36usize];
    ["Offset of field: WGPUTextureDescriptor::format"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, format) - 48usize];
    ["Offset of field: WGPUTextureDescriptor::mipLevelCount"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, mipLevelCount) - 52usize];
    ["Offset of field: WGPUTextureDescriptor::sampleCount"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, sampleCount) - 56usize];
    ["Offset of field: WGPUTextureDescriptor::viewFormatCount"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, viewFormatCount) - 64usize];
    ["Offset of field: WGPUTextureDescriptor::viewFormats"]
        [::core::mem::offset_of!(WGPUTextureDescriptor, viewFormats) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexBufferLayout {
    pub nextInChain: *mut WGPUChainedStruct,
    pub stepMode: WGPUVertexStepMode,
    pub arrayStride: u64,
    pub attributeCount: usize,
    pub attributes: *const WGPUVertexAttribute,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUVertexBufferLayout"][::core::mem::size_of::<WGPUVertexBufferLayout>() - 40usize];
    ["Alignment of WGPUVertexBufferLayout"]
        [::core::mem::align_of::<WGPUVertexBufferLayout>() - 8usize];
    ["Offset of field: WGPUVertexBufferLayout::nextInChain"]
        [::core::mem::offset_of!(WGPUVertexBufferLayout, nextInChain) - 0usize];
    ["Offset of field: WGPUVertexBufferLayout::stepMode"]
        [::core::mem::offset_of!(WGPUVertexBufferLayout, stepMode) - 8usize];
    ["Offset of field: WGPUVertexBufferLayout::arrayStride"]
        [::core::mem::offset_of!(WGPUVertexBufferLayout, arrayStride) - 16usize];
    ["Offset of field: WGPUVertexBufferLayout::attributeCount"]
        [::core::mem::offset_of!(WGPUVertexBufferLayout, attributeCount) - 24usize];
    ["Offset of field: WGPUVertexBufferLayout::attributes"]
        [::core::mem::offset_of!(WGPUVertexBufferLayout, attributes) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub entryCount: usize,
    pub entries: *const WGPUBindGroupLayoutEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUBindGroupLayoutDescriptor"]
        [::core::mem::size_of::<WGPUBindGroupLayoutDescriptor>() - 40usize];
    ["Alignment of WGPUBindGroupLayoutDescriptor"]
        [::core::mem::align_of::<WGPUBindGroupLayoutDescriptor>() - 8usize];
    ["Offset of field: WGPUBindGroupLayoutDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUBindGroupLayoutDescriptor::label"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutDescriptor, label) - 8usize];
    ["Offset of field: WGPUBindGroupLayoutDescriptor::entryCount"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutDescriptor, entryCount) - 24usize];
    ["Offset of field: WGPUBindGroupLayoutDescriptor::entries"]
        [::core::mem::offset_of!(WGPUBindGroupLayoutDescriptor, entries) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUColorTargetState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub format: WGPUTextureFormat,
    pub blend: *const WGPUBlendState,
    pub writeMask: WGPUColorWriteMask,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUColorTargetState"][::core::mem::size_of::<WGPUColorTargetState>() - 32usize];
    ["Alignment of WGPUColorTargetState"][::core::mem::align_of::<WGPUColorTargetState>() - 8usize];
    ["Offset of field: WGPUColorTargetState::nextInChain"]
        [::core::mem::offset_of!(WGPUColorTargetState, nextInChain) - 0usize];
    ["Offset of field: WGPUColorTargetState::format"]
        [::core::mem::offset_of!(WGPUColorTargetState, format) - 8usize];
    ["Offset of field: WGPUColorTargetState::blend"]
        [::core::mem::offset_of!(WGPUColorTargetState, blend) - 16usize];
    ["Offset of field: WGPUColorTargetState::writeMask"]
        [::core::mem::offset_of!(WGPUColorTargetState, writeMask) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePipelineDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub layout: WGPUPipelineLayout,
    pub compute: WGPUComputeState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUComputePipelineDescriptor"]
        [::core::mem::size_of::<WGPUComputePipelineDescriptor>() - 80usize];
    ["Alignment of WGPUComputePipelineDescriptor"]
        [::core::mem::align_of::<WGPUComputePipelineDescriptor>() - 8usize];
    ["Offset of field: WGPUComputePipelineDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPUComputePipelineDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPUComputePipelineDescriptor::label"]
        [::core::mem::offset_of!(WGPUComputePipelineDescriptor, label) - 8usize];
    ["Offset of field: WGPUComputePipelineDescriptor::layout"]
        [::core::mem::offset_of!(WGPUComputePipelineDescriptor, layout) - 24usize];
    ["Offset of field: WGPUComputePipelineDescriptor::compute"]
        [::core::mem::offset_of!(WGPUComputePipelineDescriptor, compute) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub colorAttachmentCount: usize,
    pub colorAttachments: *const WGPURenderPassColorAttachment,
    pub depthStencilAttachment: *const WGPURenderPassDepthStencilAttachment,
    pub occlusionQuerySet: WGPUQuerySet,
    pub timestampWrites: *const WGPUPassTimestampWrites,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderPassDescriptor"]
        [::core::mem::size_of::<WGPURenderPassDescriptor>() - 64usize];
    ["Alignment of WGPURenderPassDescriptor"]
        [::core::mem::align_of::<WGPURenderPassDescriptor>() - 8usize];
    ["Offset of field: WGPURenderPassDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPURenderPassDescriptor::label"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, label) - 8usize];
    ["Offset of field: WGPURenderPassDescriptor::colorAttachmentCount"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, colorAttachmentCount) - 24usize];
    ["Offset of field: WGPURenderPassDescriptor::colorAttachments"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, colorAttachments) - 32usize];
    ["Offset of field: WGPURenderPassDescriptor::depthStencilAttachment"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, depthStencilAttachment) - 40usize];
    ["Offset of field: WGPURenderPassDescriptor::occlusionQuerySet"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, occlusionQuerySet) - 48usize];
    ["Offset of field: WGPURenderPassDescriptor::timestampWrites"]
        [::core::mem::offset_of!(WGPURenderPassDescriptor, timestampWrites) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub module: WGPUShaderModule,
    pub entryPoint: WGPUStringView,
    pub constantCount: usize,
    pub constants: *const WGPUConstantEntry,
    pub bufferCount: usize,
    pub buffers: *const WGPUVertexBufferLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUVertexState"][::core::mem::size_of::<WGPUVertexState>() - 64usize];
    ["Alignment of WGPUVertexState"][::core::mem::align_of::<WGPUVertexState>() - 8usize];
    ["Offset of field: WGPUVertexState::nextInChain"]
        [::core::mem::offset_of!(WGPUVertexState, nextInChain) - 0usize];
    ["Offset of field: WGPUVertexState::module"]
        [::core::mem::offset_of!(WGPUVertexState, module) - 8usize];
    ["Offset of field: WGPUVertexState::entryPoint"]
        [::core::mem::offset_of!(WGPUVertexState, entryPoint) - 16usize];
    ["Offset of field: WGPUVertexState::constantCount"]
        [::core::mem::offset_of!(WGPUVertexState, constantCount) - 32usize];
    ["Offset of field: WGPUVertexState::constants"]
        [::core::mem::offset_of!(WGPUVertexState, constants) - 40usize];
    ["Offset of field: WGPUVertexState::bufferCount"]
        [::core::mem::offset_of!(WGPUVertexState, bufferCount) - 48usize];
    ["Offset of field: WGPUVertexState::buffers"]
        [::core::mem::offset_of!(WGPUVertexState, buffers) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUFragmentState {
    pub nextInChain: *mut WGPUChainedStruct,
    pub module: WGPUShaderModule,
    pub entryPoint: WGPUStringView,
    pub constantCount: usize,
    pub constants: *const WGPUConstantEntry,
    pub targetCount: usize,
    pub targets: *const WGPUColorTargetState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPUFragmentState"][::core::mem::size_of::<WGPUFragmentState>() - 64usize];
    ["Alignment of WGPUFragmentState"][::core::mem::align_of::<WGPUFragmentState>() - 8usize];
    ["Offset of field: WGPUFragmentState::nextInChain"]
        [::core::mem::offset_of!(WGPUFragmentState, nextInChain) - 0usize];
    ["Offset of field: WGPUFragmentState::module"]
        [::core::mem::offset_of!(WGPUFragmentState, module) - 8usize];
    ["Offset of field: WGPUFragmentState::entryPoint"]
        [::core::mem::offset_of!(WGPUFragmentState, entryPoint) - 16usize];
    ["Offset of field: WGPUFragmentState::constantCount"]
        [::core::mem::offset_of!(WGPUFragmentState, constantCount) - 32usize];
    ["Offset of field: WGPUFragmentState::constants"]
        [::core::mem::offset_of!(WGPUFragmentState, constants) - 40usize];
    ["Offset of field: WGPUFragmentState::targetCount"]
        [::core::mem::offset_of!(WGPUFragmentState, targetCount) - 48usize];
    ["Offset of field: WGPUFragmentState::targets"]
        [::core::mem::offset_of!(WGPUFragmentState, targets) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPipelineDescriptor {
    pub nextInChain: *mut WGPUChainedStruct,
    pub label: WGPUStringView,
    pub layout: WGPUPipelineLayout,
    pub vertex: WGPUVertexState,
    pub primitive: WGPUPrimitiveState,
    pub depthStencil: *const WGPUDepthStencilState,
    pub multisample: WGPUMultisampleState,
    pub fragment: *const WGPUFragmentState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WGPURenderPipelineDescriptor"]
        [::core::mem::size_of::<WGPURenderPipelineDescriptor>() - 168usize];
    ["Alignment of WGPURenderPipelineDescriptor"]
        [::core::mem::align_of::<WGPURenderPipelineDescriptor>() - 8usize];
    ["Offset of field: WGPURenderPipelineDescriptor::nextInChain"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, nextInChain) - 0usize];
    ["Offset of field: WGPURenderPipelineDescriptor::label"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, label) - 8usize];
    ["Offset of field: WGPURenderPipelineDescriptor::layout"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, layout) - 24usize];
    ["Offset of field: WGPURenderPipelineDescriptor::vertex"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, vertex) - 32usize];
    ["Offset of field: WGPURenderPipelineDescriptor::primitive"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, primitive) - 96usize];
    ["Offset of field: WGPURenderPipelineDescriptor::depthStencil"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, depthStencil) - 128usize];
    ["Offset of field: WGPURenderPipelineDescriptor::multisample"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, multisample) - 136usize];
    ["Offset of field: WGPURenderPipelineDescriptor::fragment"]
        [::core::mem::offset_of!(WGPURenderPipelineDescriptor, fragment) - 160usize];
};
pub type WGPUProcCreateInstance = ::core::option::Option<
    unsafe extern "C" fn(descriptor: *const WGPUInstanceDescriptor) -> WGPUInstance,
>;
pub type WGPUProcGetInstanceFeatures =
    ::core::option::Option<unsafe extern "C" fn(features: *mut WGPUSupportedInstanceFeatures)>;
pub type WGPUProcGetInstanceLimits =
    ::core::option::Option<unsafe extern "C" fn(limits: *mut WGPUInstanceLimits) -> WGPUStatus>;
pub type WGPUProcHasInstanceFeature =
    ::core::option::Option<unsafe extern "C" fn(feature: WGPUInstanceFeatureName) -> WGPUBool>;
pub type WGPUProcGetProcAddress =
    ::core::option::Option<unsafe extern "C" fn(procName: WGPUStringView) -> WGPUProc>;
pub type WGPUProcAdapterGetFeatures = ::core::option::Option<
    unsafe extern "C" fn(adapter: WGPUAdapter, features: *mut WGPUSupportedFeatures),
>;
pub type WGPUProcAdapterGetInfo = ::core::option::Option<
    unsafe extern "C" fn(adapter: WGPUAdapter, info: *mut WGPUAdapterInfo) -> WGPUStatus,
>;
pub type WGPUProcAdapterGetLimits = ::core::option::Option<
    unsafe extern "C" fn(adapter: WGPUAdapter, limits: *mut WGPULimits) -> WGPUStatus,
>;
pub type WGPUProcAdapterHasFeature = ::core::option::Option<
    unsafe extern "C" fn(adapter: WGPUAdapter, feature: WGPUFeatureName) -> WGPUBool,
>;
pub type WGPUProcAdapterRequestDevice = ::core::option::Option<
    unsafe extern "C" fn(
        adapter: WGPUAdapter,
        descriptor: *const WGPUDeviceDescriptor,
        callbackInfo: WGPURequestDeviceCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcAdapterAddRef = ::core::option::Option<unsafe extern "C" fn(adapter: WGPUAdapter)>;
pub type WGPUProcAdapterRelease =
    ::core::option::Option<unsafe extern "C" fn(adapter: WGPUAdapter)>;
pub type WGPUProcAdapterInfoFreeMembers =
    ::core::option::Option<unsafe extern "C" fn(adapterInfo: WGPUAdapterInfo)>;
pub type WGPUProcBindGroupSetLabel =
    ::core::option::Option<unsafe extern "C" fn(bindGroup: WGPUBindGroup, label: WGPUStringView)>;
pub type WGPUProcBindGroupAddRef =
    ::core::option::Option<unsafe extern "C" fn(bindGroup: WGPUBindGroup)>;
pub type WGPUProcBindGroupRelease =
    ::core::option::Option<unsafe extern "C" fn(bindGroup: WGPUBindGroup)>;
pub type WGPUProcBindGroupLayoutSetLabel = ::core::option::Option<
    unsafe extern "C" fn(bindGroupLayout: WGPUBindGroupLayout, label: WGPUStringView),
>;
pub type WGPUProcBindGroupLayoutAddRef =
    ::core::option::Option<unsafe extern "C" fn(bindGroupLayout: WGPUBindGroupLayout)>;
pub type WGPUProcBindGroupLayoutRelease =
    ::core::option::Option<unsafe extern "C" fn(bindGroupLayout: WGPUBindGroupLayout)>;
pub type WGPUProcBufferDestroy = ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcBufferGetConstMappedRange = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        offset: usize,
        size: usize,
    ) -> *const ::core::ffi::c_void,
>;
pub type WGPUProcBufferGetMappedRange = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        offset: usize,
        size: usize,
    ) -> *mut ::core::ffi::c_void,
>;
pub type WGPUProcBufferGetMapState =
    ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer) -> WGPUBufferMapState>;
pub type WGPUProcBufferGetSize =
    ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer) -> u64>;
pub type WGPUProcBufferGetUsage =
    ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer) -> WGPUBufferUsage>;
pub type WGPUProcBufferMapAsync = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        mode: WGPUMapMode,
        offset: usize,
        size: usize,
        callbackInfo: WGPUBufferMapCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcBufferReadMappedRange = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        offset: usize,
        data: *mut ::core::ffi::c_void,
        size: usize,
    ) -> WGPUStatus,
>;
pub type WGPUProcBufferSetLabel =
    ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer, label: WGPUStringView)>;
pub type WGPUProcBufferUnmap = ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcBufferWriteMappedRange = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        offset: usize,
        data: *const ::core::ffi::c_void,
        size: usize,
    ) -> WGPUStatus,
>;
pub type WGPUProcBufferAddRef = ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcBufferRelease = ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcCommandBufferSetLabel = ::core::option::Option<
    unsafe extern "C" fn(commandBuffer: WGPUCommandBuffer, label: WGPUStringView),
>;
pub type WGPUProcCommandBufferAddRef =
    ::core::option::Option<unsafe extern "C" fn(commandBuffer: WGPUCommandBuffer)>;
pub type WGPUProcCommandBufferRelease =
    ::core::option::Option<unsafe extern "C" fn(commandBuffer: WGPUCommandBuffer)>;
pub type WGPUProcCommandEncoderBeginComputePass = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUComputePassDescriptor,
    ) -> WGPUComputePassEncoder,
>;
pub type WGPUProcCommandEncoderBeginRenderPass = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPURenderPassDescriptor,
    ) -> WGPURenderPassEncoder,
>;
pub type WGPUProcCommandEncoderClearBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcCommandEncoderCopyBufferToBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: WGPUBuffer,
        sourceOffset: u64,
        destination: WGPUBuffer,
        destinationOffset: u64,
        size: u64,
    ),
>;
pub type WGPUProcCommandEncoderCopyBufferToTexture = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTexelCopyBufferInfo,
        destination: *const WGPUTexelCopyTextureInfo,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderCopyTextureToBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTexelCopyTextureInfo,
        destination: *const WGPUTexelCopyBufferInfo,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderCopyTextureToTexture = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTexelCopyTextureInfo,
        destination: *const WGPUTexelCopyTextureInfo,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderFinish = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUCommandBufferDescriptor,
    ) -> WGPUCommandBuffer,
>;
pub type WGPUProcCommandEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder, markerLabel: WGPUStringView),
>;
pub type WGPUProcCommandEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder)>;
pub type WGPUProcCommandEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder, groupLabel: WGPUStringView),
>;
pub type WGPUProcCommandEncoderResolveQuerySet = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        querySet: WGPUQuerySet,
        firstQuery: u32,
        queryCount: u32,
        destination: WGPUBuffer,
        destinationOffset: u64,
    ),
>;
pub type WGPUProcCommandEncoderSetLabel = ::core::option::Option<
    unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder, label: WGPUStringView),
>;
pub type WGPUProcCommandEncoderWriteTimestamp = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    ),
>;
pub type WGPUProcCommandEncoderAddRef =
    ::core::option::Option<unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder)>;
pub type WGPUProcCommandEncoderRelease =
    ::core::option::Option<unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder)>;
pub type WGPUProcComputePassEncoderDispatchWorkgroups = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        workgroupCountX: u32,
        workgroupCountY: u32,
        workgroupCountZ: u32,
    ),
>;
pub type WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcComputePassEncoderEnd =
    ::core::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, markerLabel: WGPUStringView),
>;
pub type WGPUProcComputePassEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, groupLabel: WGPUStringView),
>;
pub type WGPUProcComputePassEncoderSetBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: usize,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcComputePassEncoderSetLabel = ::core::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, label: WGPUStringView),
>;
pub type WGPUProcComputePassEncoderSetPipeline = ::core::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, pipeline: WGPUComputePipeline),
>;
pub type WGPUProcComputePassEncoderAddRef =
    ::core::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderRelease =
    ::core::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePipelineGetBindGroupLayout = ::core::option::Option<
    unsafe extern "C" fn(
        computePipeline: WGPUComputePipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcComputePipelineSetLabel = ::core::option::Option<
    unsafe extern "C" fn(computePipeline: WGPUComputePipeline, label: WGPUStringView),
>;
pub type WGPUProcComputePipelineAddRef =
    ::core::option::Option<unsafe extern "C" fn(computePipeline: WGPUComputePipeline)>;
pub type WGPUProcComputePipelineRelease =
    ::core::option::Option<unsafe extern "C" fn(computePipeline: WGPUComputePipeline)>;
pub type WGPUProcDeviceCreateBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupDescriptor,
    ) -> WGPUBindGroup,
>;
pub type WGPUProcDeviceCreateBindGroupLayout = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupLayoutDescriptor,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcDeviceCreateBuffer = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, descriptor: *const WGPUBufferDescriptor) -> WGPUBuffer,
>;
pub type WGPUProcDeviceCreateCommandEncoder = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUCommandEncoderDescriptor,
    ) -> WGPUCommandEncoder,
>;
pub type WGPUProcDeviceCreateComputePipeline = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
    ) -> WGPUComputePipeline,
>;
pub type WGPUProcDeviceCreateComputePipelineAsync = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
        callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcDeviceCreatePipelineLayout = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUPipelineLayoutDescriptor,
    ) -> WGPUPipelineLayout,
>;
pub type WGPUProcDeviceCreateQuerySet = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUQuerySetDescriptor,
    ) -> WGPUQuerySet,
>;
pub type WGPUProcDeviceCreateRenderBundleEncoder = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderBundleEncoderDescriptor,
    ) -> WGPURenderBundleEncoder,
>;
pub type WGPUProcDeviceCreateRenderPipeline = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
    ) -> WGPURenderPipeline,
>;
pub type WGPUProcDeviceCreateRenderPipelineAsync = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
        callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcDeviceCreateSampler = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUSamplerDescriptor,
    ) -> WGPUSampler,
>;
pub type WGPUProcDeviceCreateShaderModule = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUShaderModuleDescriptor,
    ) -> WGPUShaderModule,
>;
pub type WGPUProcDeviceCreateTexture = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUTextureDescriptor,
    ) -> WGPUTexture,
>;
pub type WGPUProcDeviceDestroy = ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice)>;
pub type WGPUProcDeviceGetAdapterInfo = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, adapterInfo: *mut WGPUAdapterInfo) -> WGPUStatus,
>;
pub type WGPUProcDeviceGetFeatures = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, features: *mut WGPUSupportedFeatures),
>;
pub type WGPUProcDeviceGetLimits = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, limits: *mut WGPULimits) -> WGPUStatus,
>;
pub type WGPUProcDeviceGetLostFuture =
    ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice) -> WGPUFuture>;
pub type WGPUProcDeviceGetQueue =
    ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice) -> WGPUQueue>;
pub type WGPUProcDeviceHasFeature = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, feature: WGPUFeatureName) -> WGPUBool,
>;
pub type WGPUProcDevicePopErrorScope = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callbackInfo: WGPUPopErrorScopeCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcDevicePushErrorScope =
    ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice, filter: WGPUErrorFilter)>;
pub type WGPUProcDeviceSetLabel =
    ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice, label: WGPUStringView)>;
pub type WGPUProcDeviceAddRef = ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice)>;
pub type WGPUProcDeviceRelease = ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice)>;
pub type WGPUProcInstanceCreateSurface = ::core::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        descriptor: *const WGPUSurfaceDescriptor,
    ) -> WGPUSurface,
>;
pub type WGPUProcInstanceGetWGSLLanguageFeatures = ::core::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        features: *mut WGPUSupportedWGSLLanguageFeatures,
    ) -> WGPUStatus,
>;
pub type WGPUProcInstanceHasWGSLLanguageFeature = ::core::option::Option<
    unsafe extern "C" fn(instance: WGPUInstance, feature: WGPUWGSLLanguageFeatureName) -> WGPUBool,
>;
pub type WGPUProcInstanceProcessEvents =
    ::core::option::Option<unsafe extern "C" fn(instance: WGPUInstance)>;
pub type WGPUProcInstanceRequestAdapter = ::core::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        options: *const WGPURequestAdapterOptions,
        callbackInfo: WGPURequestAdapterCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcInstanceWaitAny = ::core::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        futureCount: usize,
        futures: *mut WGPUFutureWaitInfo,
        timeoutNS: u64,
    ) -> WGPUWaitStatus,
>;
pub type WGPUProcInstanceAddRef =
    ::core::option::Option<unsafe extern "C" fn(instance: WGPUInstance)>;
pub type WGPUProcInstanceRelease =
    ::core::option::Option<unsafe extern "C" fn(instance: WGPUInstance)>;
pub type WGPUProcPipelineLayoutSetLabel = ::core::option::Option<
    unsafe extern "C" fn(pipelineLayout: WGPUPipelineLayout, label: WGPUStringView),
>;
pub type WGPUProcPipelineLayoutAddRef =
    ::core::option::Option<unsafe extern "C" fn(pipelineLayout: WGPUPipelineLayout)>;
pub type WGPUProcPipelineLayoutRelease =
    ::core::option::Option<unsafe extern "C" fn(pipelineLayout: WGPUPipelineLayout)>;
pub type WGPUProcQuerySetDestroy =
    ::core::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet)>;
pub type WGPUProcQuerySetGetCount =
    ::core::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet) -> u32>;
pub type WGPUProcQuerySetGetType =
    ::core::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet) -> WGPUQueryType>;
pub type WGPUProcQuerySetSetLabel =
    ::core::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet, label: WGPUStringView)>;
pub type WGPUProcQuerySetAddRef =
    ::core::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet)>;
pub type WGPUProcQuerySetRelease =
    ::core::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet)>;
pub type WGPUProcQueueOnSubmittedWorkDone = ::core::option::Option<
    unsafe extern "C" fn(
        queue: WGPUQueue,
        callbackInfo: WGPUQueueWorkDoneCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcQueueSetLabel =
    ::core::option::Option<unsafe extern "C" fn(queue: WGPUQueue, label: WGPUStringView)>;
pub type WGPUProcQueueSubmit = ::core::option::Option<
    unsafe extern "C" fn(queue: WGPUQueue, commandCount: usize, commands: *const WGPUCommandBuffer),
>;
pub type WGPUProcQueueWriteBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        queue: WGPUQueue,
        buffer: WGPUBuffer,
        bufferOffset: u64,
        data: *const ::core::ffi::c_void,
        size: usize,
    ),
>;
pub type WGPUProcQueueWriteTexture = ::core::option::Option<
    unsafe extern "C" fn(
        queue: WGPUQueue,
        destination: *const WGPUTexelCopyTextureInfo,
        data: *const ::core::ffi::c_void,
        dataSize: usize,
        dataLayout: *const WGPUTexelCopyBufferLayout,
        writeSize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcQueueAddRef = ::core::option::Option<unsafe extern "C" fn(queue: WGPUQueue)>;
pub type WGPUProcQueueRelease = ::core::option::Option<unsafe extern "C" fn(queue: WGPUQueue)>;
pub type WGPUProcRenderBundleSetLabel = ::core::option::Option<
    unsafe extern "C" fn(renderBundle: WGPURenderBundle, label: WGPUStringView),
>;
pub type WGPUProcRenderBundleAddRef =
    ::core::option::Option<unsafe extern "C" fn(renderBundle: WGPURenderBundle)>;
pub type WGPUProcRenderBundleRelease =
    ::core::option::Option<unsafe extern "C" fn(renderBundle: WGPURenderBundle)>;
pub type WGPUProcRenderBundleEncoderDraw = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndexed = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndexedIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderFinish = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        descriptor: *const WGPURenderBundleDescriptor,
    ) -> WGPURenderBundle,
>;
pub type WGPUProcRenderBundleEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder, markerLabel: WGPUStringView),
>;
pub type WGPUProcRenderBundleEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder)>;
pub type WGPUProcRenderBundleEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder, groupLabel: WGPUStringView),
>;
pub type WGPUProcRenderBundleEncoderSetBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: usize,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetIndexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        buffer: WGPUBuffer,
        format: WGPUIndexFormat,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetLabel = ::core::option::Option<
    unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder, label: WGPUStringView),
>;
pub type WGPUProcRenderBundleEncoderSetPipeline = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        pipeline: WGPURenderPipeline,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetVertexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderAddRef =
    ::core::option::Option<unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder)>;
pub type WGPUProcRenderBundleEncoderRelease =
    ::core::option::Option<unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder)>;
pub type WGPUProcRenderPassEncoderBeginOcclusionQuery = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, queryIndex: u32),
>;
pub type WGPUProcRenderPassEncoderDraw = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndexed = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndexedIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderEnd =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderEndOcclusionQuery =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderExecuteBundles = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        bundleCount: usize,
        bundles: *const WGPURenderBundle,
    ),
>;
pub type WGPUProcRenderPassEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, markerLabel: WGPUStringView),
>;
pub type WGPUProcRenderPassEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, groupLabel: WGPUStringView),
>;
pub type WGPUProcRenderPassEncoderSetBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: usize,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcRenderPassEncoderSetBlendConstant = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, color: *const WGPUColor),
>;
pub type WGPUProcRenderPassEncoderSetIndexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        buffer: WGPUBuffer,
        format: WGPUIndexFormat,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderSetLabel = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, label: WGPUStringView),
>;
pub type WGPUProcRenderPassEncoderSetPipeline = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, pipeline: WGPURenderPipeline),
>;
pub type WGPUProcRenderPassEncoderSetScissorRect = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderSetStencilReference = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, reference: u32),
>;
pub type WGPUProcRenderPassEncoderSetVertexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderSetViewport = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        minDepth: f32,
        maxDepth: f32,
    ),
>;
pub type WGPUProcRenderPassEncoderAddRef =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderRelease =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPipelineGetBindGroupLayout = ::core::option::Option<
    unsafe extern "C" fn(
        renderPipeline: WGPURenderPipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcRenderPipelineSetLabel = ::core::option::Option<
    unsafe extern "C" fn(renderPipeline: WGPURenderPipeline, label: WGPUStringView),
>;
pub type WGPUProcRenderPipelineAddRef =
    ::core::option::Option<unsafe extern "C" fn(renderPipeline: WGPURenderPipeline)>;
pub type WGPUProcRenderPipelineRelease =
    ::core::option::Option<unsafe extern "C" fn(renderPipeline: WGPURenderPipeline)>;
pub type WGPUProcSamplerSetLabel =
    ::core::option::Option<unsafe extern "C" fn(sampler: WGPUSampler, label: WGPUStringView)>;
pub type WGPUProcSamplerAddRef = ::core::option::Option<unsafe extern "C" fn(sampler: WGPUSampler)>;
pub type WGPUProcSamplerRelease =
    ::core::option::Option<unsafe extern "C" fn(sampler: WGPUSampler)>;
pub type WGPUProcShaderModuleGetCompilationInfo = ::core::option::Option<
    unsafe extern "C" fn(
        shaderModule: WGPUShaderModule,
        callbackInfo: WGPUCompilationInfoCallbackInfo,
    ) -> WGPUFuture,
>;
pub type WGPUProcShaderModuleSetLabel = ::core::option::Option<
    unsafe extern "C" fn(shaderModule: WGPUShaderModule, label: WGPUStringView),
>;
pub type WGPUProcShaderModuleAddRef =
    ::core::option::Option<unsafe extern "C" fn(shaderModule: WGPUShaderModule)>;
pub type WGPUProcShaderModuleRelease =
    ::core::option::Option<unsafe extern "C" fn(shaderModule: WGPUShaderModule)>;
pub type WGPUProcSupportedFeaturesFreeMembers =
    ::core::option::Option<unsafe extern "C" fn(supportedFeatures: WGPUSupportedFeatures)>;
pub type WGPUProcSupportedInstanceFeaturesFreeMembers = ::core::option::Option<
    unsafe extern "C" fn(supportedInstanceFeatures: WGPUSupportedInstanceFeatures),
>;
pub type WGPUProcSupportedWGSLLanguageFeaturesFreeMembers = ::core::option::Option<
    unsafe extern "C" fn(supportedWGSLLanguageFeatures: WGPUSupportedWGSLLanguageFeatures),
>;
pub type WGPUProcSurfaceConfigure = ::core::option::Option<
    unsafe extern "C" fn(surface: WGPUSurface, config: *const WGPUSurfaceConfiguration),
>;
pub type WGPUProcSurfaceGetCapabilities = ::core::option::Option<
    unsafe extern "C" fn(
        surface: WGPUSurface,
        adapter: WGPUAdapter,
        capabilities: *mut WGPUSurfaceCapabilities,
    ) -> WGPUStatus,
>;
pub type WGPUProcSurfaceGetCurrentTexture = ::core::option::Option<
    unsafe extern "C" fn(surface: WGPUSurface, surfaceTexture: *mut WGPUSurfaceTexture),
>;
pub type WGPUProcSurfacePresent =
    ::core::option::Option<unsafe extern "C" fn(surface: WGPUSurface) -> WGPUStatus>;
pub type WGPUProcSurfaceSetLabel =
    ::core::option::Option<unsafe extern "C" fn(surface: WGPUSurface, label: WGPUStringView)>;
pub type WGPUProcSurfaceUnconfigure =
    ::core::option::Option<unsafe extern "C" fn(surface: WGPUSurface)>;
pub type WGPUProcSurfaceAddRef = ::core::option::Option<unsafe extern "C" fn(surface: WGPUSurface)>;
pub type WGPUProcSurfaceRelease =
    ::core::option::Option<unsafe extern "C" fn(surface: WGPUSurface)>;
pub type WGPUProcSurfaceCapabilitiesFreeMembers =
    ::core::option::Option<unsafe extern "C" fn(surfaceCapabilities: WGPUSurfaceCapabilities)>;
pub type WGPUProcTextureCreateView = ::core::option::Option<
    unsafe extern "C" fn(
        texture: WGPUTexture,
        descriptor: *const WGPUTextureViewDescriptor,
    ) -> WGPUTextureView,
>;
pub type WGPUProcTextureDestroy =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture)>;
pub type WGPUProcTextureGetDepthOrArrayLayers =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> u32>;
pub type WGPUProcTextureGetDimension =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> WGPUTextureDimension>;
pub type WGPUProcTextureGetFormat =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> WGPUTextureFormat>;
pub type WGPUProcTextureGetHeight =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> u32>;
pub type WGPUProcTextureGetMipLevelCount =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> u32>;
pub type WGPUProcTextureGetSampleCount =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> u32>;
pub type WGPUProcTextureGetUsage =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> WGPUTextureUsage>;
pub type WGPUProcTextureGetWidth =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture) -> u32>;
pub type WGPUProcTextureSetLabel =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture, label: WGPUStringView)>;
pub type WGPUProcTextureAddRef = ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture)>;
pub type WGPUProcTextureRelease =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture)>;
pub type WGPUProcTextureViewSetLabel = ::core::option::Option<
    unsafe extern "C" fn(textureView: WGPUTextureView, label: WGPUStringView),
>;
pub type WGPUProcTextureViewAddRef =
    ::core::option::Option<unsafe extern "C" fn(textureView: WGPUTextureView)>;
pub type WGPUProcTextureViewRelease =
    ::core::option::Option<unsafe extern "C" fn(textureView: WGPUTextureView)>;
unsafe extern "C" {
    pub fn wgpuCreateInstance(descriptor: *const WGPUInstanceDescriptor) -> WGPUInstance;
}
unsafe extern "C" {
    pub fn wgpuGetInstanceFeatures(features: *mut WGPUSupportedInstanceFeatures);
}
unsafe extern "C" {
    pub fn wgpuGetInstanceLimits(limits: *mut WGPUInstanceLimits) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuHasInstanceFeature(feature: WGPUInstanceFeatureName) -> WGPUBool;
}
unsafe extern "C" {
    pub fn wgpuGetProcAddress(procName: WGPUStringView) -> WGPUProc;
}
unsafe extern "C" {
    pub fn wgpuAdapterGetFeatures(adapter: WGPUAdapter, features: *mut WGPUSupportedFeatures);
}
unsafe extern "C" {
    pub fn wgpuAdapterGetInfo(adapter: WGPUAdapter, info: *mut WGPUAdapterInfo) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuAdapterGetLimits(adapter: WGPUAdapter, limits: *mut WGPULimits) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuAdapterHasFeature(adapter: WGPUAdapter, feature: WGPUFeatureName) -> WGPUBool;
}
unsafe extern "C" {
    pub fn wgpuAdapterRequestDevice(
        adapter: WGPUAdapter,
        descriptor: *const WGPUDeviceDescriptor,
        callbackInfo: WGPURequestDeviceCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuAdapterAddRef(adapter: WGPUAdapter);
}
unsafe extern "C" {
    pub fn wgpuAdapterRelease(adapter: WGPUAdapter);
}
unsafe extern "C" {
    pub fn wgpuAdapterInfoFreeMembers(adapterInfo: WGPUAdapterInfo);
}
unsafe extern "C" {
    pub fn wgpuBindGroupSetLabel(bindGroup: WGPUBindGroup, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuBindGroupAddRef(bindGroup: WGPUBindGroup);
}
unsafe extern "C" {
    pub fn wgpuBindGroupRelease(bindGroup: WGPUBindGroup);
}
unsafe extern "C" {
    pub fn wgpuBindGroupLayoutSetLabel(bindGroupLayout: WGPUBindGroupLayout, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuBindGroupLayoutAddRef(bindGroupLayout: WGPUBindGroupLayout);
}
unsafe extern "C" {
    pub fn wgpuBindGroupLayoutRelease(bindGroupLayout: WGPUBindGroupLayout);
}
unsafe extern "C" {
    pub fn wgpuBufferDestroy(buffer: WGPUBuffer);
}
unsafe extern "C" {
    pub fn wgpuBufferGetConstMappedRange(
        buffer: WGPUBuffer,
        offset: usize,
        size: usize,
    ) -> *const ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn wgpuBufferGetMappedRange(
        buffer: WGPUBuffer,
        offset: usize,
        size: usize,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn wgpuBufferGetMapState(buffer: WGPUBuffer) -> WGPUBufferMapState;
}
unsafe extern "C" {
    pub fn wgpuBufferGetSize(buffer: WGPUBuffer) -> u64;
}
unsafe extern "C" {
    pub fn wgpuBufferGetUsage(buffer: WGPUBuffer) -> WGPUBufferUsage;
}
unsafe extern "C" {
    pub fn wgpuBufferMapAsync(
        buffer: WGPUBuffer,
        mode: WGPUMapMode,
        offset: usize,
        size: usize,
        callbackInfo: WGPUBufferMapCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuBufferReadMappedRange(
        buffer: WGPUBuffer,
        offset: usize,
        data: *mut ::core::ffi::c_void,
        size: usize,
    ) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuBufferSetLabel(buffer: WGPUBuffer, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuBufferUnmap(buffer: WGPUBuffer);
}
unsafe extern "C" {
    pub fn wgpuBufferWriteMappedRange(
        buffer: WGPUBuffer,
        offset: usize,
        data: *const ::core::ffi::c_void,
        size: usize,
    ) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuBufferAddRef(buffer: WGPUBuffer);
}
unsafe extern "C" {
    pub fn wgpuBufferRelease(buffer: WGPUBuffer);
}
unsafe extern "C" {
    pub fn wgpuCommandBufferSetLabel(commandBuffer: WGPUCommandBuffer, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuCommandBufferAddRef(commandBuffer: WGPUCommandBuffer);
}
unsafe extern "C" {
    pub fn wgpuCommandBufferRelease(commandBuffer: WGPUCommandBuffer);
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderBeginComputePass(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUComputePassDescriptor,
    ) -> WGPUComputePassEncoder;
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderBeginRenderPass(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPURenderPassDescriptor,
    ) -> WGPURenderPassEncoder;
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderClearBuffer(
        commandEncoder: WGPUCommandEncoder,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderCopyBufferToBuffer(
        commandEncoder: WGPUCommandEncoder,
        source: WGPUBuffer,
        sourceOffset: u64,
        destination: WGPUBuffer,
        destinationOffset: u64,
        size: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderCopyBufferToTexture(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTexelCopyBufferInfo,
        destination: *const WGPUTexelCopyTextureInfo,
        copySize: *const WGPUExtent3D,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderCopyTextureToBuffer(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTexelCopyTextureInfo,
        destination: *const WGPUTexelCopyBufferInfo,
        copySize: *const WGPUExtent3D,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderCopyTextureToTexture(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTexelCopyTextureInfo,
        destination: *const WGPUTexelCopyTextureInfo,
        copySize: *const WGPUExtent3D,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderFinish(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUCommandBufferDescriptor,
    ) -> WGPUCommandBuffer;
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderInsertDebugMarker(
        commandEncoder: WGPUCommandEncoder,
        markerLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderPopDebugGroup(commandEncoder: WGPUCommandEncoder);
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderPushDebugGroup(
        commandEncoder: WGPUCommandEncoder,
        groupLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderResolveQuerySet(
        commandEncoder: WGPUCommandEncoder,
        querySet: WGPUQuerySet,
        firstQuery: u32,
        queryCount: u32,
        destination: WGPUBuffer,
        destinationOffset: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderSetLabel(commandEncoder: WGPUCommandEncoder, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderWriteTimestamp(
        commandEncoder: WGPUCommandEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderAddRef(commandEncoder: WGPUCommandEncoder);
}
unsafe extern "C" {
    pub fn wgpuCommandEncoderRelease(commandEncoder: WGPUCommandEncoder);
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderDispatchWorkgroups(
        computePassEncoder: WGPUComputePassEncoder,
        workgroupCountX: u32,
        workgroupCountY: u32,
        workgroupCountZ: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderDispatchWorkgroupsIndirect(
        computePassEncoder: WGPUComputePassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderEnd(computePassEncoder: WGPUComputePassEncoder);
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderInsertDebugMarker(
        computePassEncoder: WGPUComputePassEncoder,
        markerLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderPopDebugGroup(computePassEncoder: WGPUComputePassEncoder);
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderPushDebugGroup(
        computePassEncoder: WGPUComputePassEncoder,
        groupLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderSetBindGroup(
        computePassEncoder: WGPUComputePassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: usize,
        dynamicOffsets: *const u32,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderSetLabel(
        computePassEncoder: WGPUComputePassEncoder,
        label: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderSetPipeline(
        computePassEncoder: WGPUComputePassEncoder,
        pipeline: WGPUComputePipeline,
    );
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderAddRef(computePassEncoder: WGPUComputePassEncoder);
}
unsafe extern "C" {
    pub fn wgpuComputePassEncoderRelease(computePassEncoder: WGPUComputePassEncoder);
}
unsafe extern "C" {
    pub fn wgpuComputePipelineGetBindGroupLayout(
        computePipeline: WGPUComputePipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout;
}
unsafe extern "C" {
    pub fn wgpuComputePipelineSetLabel(computePipeline: WGPUComputePipeline, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuComputePipelineAddRef(computePipeline: WGPUComputePipeline);
}
unsafe extern "C" {
    pub fn wgpuComputePipelineRelease(computePipeline: WGPUComputePipeline);
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateBindGroup(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupDescriptor,
    ) -> WGPUBindGroup;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateBindGroupLayout(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupLayoutDescriptor,
    ) -> WGPUBindGroupLayout;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateBuffer(
        device: WGPUDevice,
        descriptor: *const WGPUBufferDescriptor,
    ) -> WGPUBuffer;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateCommandEncoder(
        device: WGPUDevice,
        descriptor: *const WGPUCommandEncoderDescriptor,
    ) -> WGPUCommandEncoder;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateComputePipeline(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
    ) -> WGPUComputePipeline;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateComputePipelineAsync(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
        callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreatePipelineLayout(
        device: WGPUDevice,
        descriptor: *const WGPUPipelineLayoutDescriptor,
    ) -> WGPUPipelineLayout;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateQuerySet(
        device: WGPUDevice,
        descriptor: *const WGPUQuerySetDescriptor,
    ) -> WGPUQuerySet;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateRenderBundleEncoder(
        device: WGPUDevice,
        descriptor: *const WGPURenderBundleEncoderDescriptor,
    ) -> WGPURenderBundleEncoder;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateRenderPipeline(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
    ) -> WGPURenderPipeline;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateRenderPipelineAsync(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
        callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateSampler(
        device: WGPUDevice,
        descriptor: *const WGPUSamplerDescriptor,
    ) -> WGPUSampler;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateShaderModule(
        device: WGPUDevice,
        descriptor: *const WGPUShaderModuleDescriptor,
    ) -> WGPUShaderModule;
}
unsafe extern "C" {
    pub fn wgpuDeviceCreateTexture(
        device: WGPUDevice,
        descriptor: *const WGPUTextureDescriptor,
    ) -> WGPUTexture;
}
unsafe extern "C" {
    pub fn wgpuDeviceDestroy(device: WGPUDevice);
}
unsafe extern "C" {
    pub fn wgpuDeviceGetAdapterInfo(
        device: WGPUDevice,
        adapterInfo: *mut WGPUAdapterInfo,
    ) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuDeviceGetFeatures(device: WGPUDevice, features: *mut WGPUSupportedFeatures);
}
unsafe extern "C" {
    pub fn wgpuDeviceGetLimits(device: WGPUDevice, limits: *mut WGPULimits) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuDeviceGetLostFuture(device: WGPUDevice) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuDeviceGetQueue(device: WGPUDevice) -> WGPUQueue;
}
unsafe extern "C" {
    pub fn wgpuDeviceHasFeature(device: WGPUDevice, feature: WGPUFeatureName) -> WGPUBool;
}
unsafe extern "C" {
    pub fn wgpuDevicePopErrorScope(
        device: WGPUDevice,
        callbackInfo: WGPUPopErrorScopeCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuDevicePushErrorScope(device: WGPUDevice, filter: WGPUErrorFilter);
}
unsafe extern "C" {
    pub fn wgpuDeviceSetLabel(device: WGPUDevice, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuDeviceAddRef(device: WGPUDevice);
}
unsafe extern "C" {
    pub fn wgpuDeviceRelease(device: WGPUDevice);
}
unsafe extern "C" {
    pub fn wgpuInstanceCreateSurface(
        instance: WGPUInstance,
        descriptor: *const WGPUSurfaceDescriptor,
    ) -> WGPUSurface;
}
unsafe extern "C" {
    pub fn wgpuInstanceGetWGSLLanguageFeatures(
        instance: WGPUInstance,
        features: *mut WGPUSupportedWGSLLanguageFeatures,
    ) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuInstanceHasWGSLLanguageFeature(
        instance: WGPUInstance,
        feature: WGPUWGSLLanguageFeatureName,
    ) -> WGPUBool;
}
unsafe extern "C" {
    pub fn wgpuInstanceProcessEvents(instance: WGPUInstance);
}
unsafe extern "C" {
    pub fn wgpuInstanceRequestAdapter(
        instance: WGPUInstance,
        options: *const WGPURequestAdapterOptions,
        callbackInfo: WGPURequestAdapterCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuInstanceWaitAny(
        instance: WGPUInstance,
        futureCount: usize,
        futures: *mut WGPUFutureWaitInfo,
        timeoutNS: u64,
    ) -> WGPUWaitStatus;
}
unsafe extern "C" {
    pub fn wgpuInstanceAddRef(instance: WGPUInstance);
}
unsafe extern "C" {
    pub fn wgpuInstanceRelease(instance: WGPUInstance);
}
unsafe extern "C" {
    pub fn wgpuPipelineLayoutSetLabel(pipelineLayout: WGPUPipelineLayout, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuPipelineLayoutAddRef(pipelineLayout: WGPUPipelineLayout);
}
unsafe extern "C" {
    pub fn wgpuPipelineLayoutRelease(pipelineLayout: WGPUPipelineLayout);
}
unsafe extern "C" {
    pub fn wgpuQuerySetDestroy(querySet: WGPUQuerySet);
}
unsafe extern "C" {
    pub fn wgpuQuerySetGetCount(querySet: WGPUQuerySet) -> u32;
}
unsafe extern "C" {
    pub fn wgpuQuerySetGetType(querySet: WGPUQuerySet) -> WGPUQueryType;
}
unsafe extern "C" {
    pub fn wgpuQuerySetSetLabel(querySet: WGPUQuerySet, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuQuerySetAddRef(querySet: WGPUQuerySet);
}
unsafe extern "C" {
    pub fn wgpuQuerySetRelease(querySet: WGPUQuerySet);
}
unsafe extern "C" {
    pub fn wgpuQueueOnSubmittedWorkDone(
        queue: WGPUQueue,
        callbackInfo: WGPUQueueWorkDoneCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuQueueSetLabel(queue: WGPUQueue, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuQueueSubmit(
        queue: WGPUQueue,
        commandCount: usize,
        commands: *const WGPUCommandBuffer,
    );
}
unsafe extern "C" {
    pub fn wgpuQueueWriteBuffer(
        queue: WGPUQueue,
        buffer: WGPUBuffer,
        bufferOffset: u64,
        data: *const ::core::ffi::c_void,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn wgpuQueueWriteTexture(
        queue: WGPUQueue,
        destination: *const WGPUTexelCopyTextureInfo,
        data: *const ::core::ffi::c_void,
        dataSize: usize,
        dataLayout: *const WGPUTexelCopyBufferLayout,
        writeSize: *const WGPUExtent3D,
    );
}
unsafe extern "C" {
    pub fn wgpuQueueAddRef(queue: WGPUQueue);
}
unsafe extern "C" {
    pub fn wgpuQueueRelease(queue: WGPUQueue);
}
unsafe extern "C" {
    pub fn wgpuRenderBundleSetLabel(renderBundle: WGPURenderBundle, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuRenderBundleAddRef(renderBundle: WGPURenderBundle);
}
unsafe extern "C" {
    pub fn wgpuRenderBundleRelease(renderBundle: WGPURenderBundle);
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderDraw(
        renderBundleEncoder: WGPURenderBundleEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderDrawIndexed(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderDrawIndexedIndirect(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderDrawIndirect(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderFinish(
        renderBundleEncoder: WGPURenderBundleEncoder,
        descriptor: *const WGPURenderBundleDescriptor,
    ) -> WGPURenderBundle;
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderInsertDebugMarker(
        renderBundleEncoder: WGPURenderBundleEncoder,
        markerLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderPopDebugGroup(renderBundleEncoder: WGPURenderBundleEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderPushDebugGroup(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderSetBindGroup(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: usize,
        dynamicOffsets: *const u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderSetIndexBuffer(
        renderBundleEncoder: WGPURenderBundleEncoder,
        buffer: WGPUBuffer,
        format: WGPUIndexFormat,
        offset: u64,
        size: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderSetLabel(
        renderBundleEncoder: WGPURenderBundleEncoder,
        label: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderSetPipeline(
        renderBundleEncoder: WGPURenderBundleEncoder,
        pipeline: WGPURenderPipeline,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderSetVertexBuffer(
        renderBundleEncoder: WGPURenderBundleEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderAddRef(renderBundleEncoder: WGPURenderBundleEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderBundleEncoderRelease(renderBundleEncoder: WGPURenderBundleEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderBeginOcclusionQuery(
        renderPassEncoder: WGPURenderPassEncoder,
        queryIndex: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderDraw(
        renderPassEncoder: WGPURenderPassEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderDrawIndexed(
        renderPassEncoder: WGPURenderPassEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderDrawIndexedIndirect(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderDrawIndirect(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderEnd(renderPassEncoder: WGPURenderPassEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderEndOcclusionQuery(renderPassEncoder: WGPURenderPassEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderExecuteBundles(
        renderPassEncoder: WGPURenderPassEncoder,
        bundleCount: usize,
        bundles: *const WGPURenderBundle,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderInsertDebugMarker(
        renderPassEncoder: WGPURenderPassEncoder,
        markerLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderPopDebugGroup(renderPassEncoder: WGPURenderPassEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderPushDebugGroup(
        renderPassEncoder: WGPURenderPassEncoder,
        groupLabel: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetBindGroup(
        renderPassEncoder: WGPURenderPassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: usize,
        dynamicOffsets: *const u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetBlendConstant(
        renderPassEncoder: WGPURenderPassEncoder,
        color: *const WGPUColor,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetIndexBuffer(
        renderPassEncoder: WGPURenderPassEncoder,
        buffer: WGPUBuffer,
        format: WGPUIndexFormat,
        offset: u64,
        size: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetLabel(
        renderPassEncoder: WGPURenderPassEncoder,
        label: WGPUStringView,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetPipeline(
        renderPassEncoder: WGPURenderPassEncoder,
        pipeline: WGPURenderPipeline,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetScissorRect(
        renderPassEncoder: WGPURenderPassEncoder,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetStencilReference(
        renderPassEncoder: WGPURenderPassEncoder,
        reference: u32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetVertexBuffer(
        renderPassEncoder: WGPURenderPassEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderSetViewport(
        renderPassEncoder: WGPURenderPassEncoder,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        minDepth: f32,
        maxDepth: f32,
    );
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderAddRef(renderPassEncoder: WGPURenderPassEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderPassEncoderRelease(renderPassEncoder: WGPURenderPassEncoder);
}
unsafe extern "C" {
    pub fn wgpuRenderPipelineGetBindGroupLayout(
        renderPipeline: WGPURenderPipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout;
}
unsafe extern "C" {
    pub fn wgpuRenderPipelineSetLabel(renderPipeline: WGPURenderPipeline, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuRenderPipelineAddRef(renderPipeline: WGPURenderPipeline);
}
unsafe extern "C" {
    pub fn wgpuRenderPipelineRelease(renderPipeline: WGPURenderPipeline);
}
unsafe extern "C" {
    pub fn wgpuSamplerSetLabel(sampler: WGPUSampler, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuSamplerAddRef(sampler: WGPUSampler);
}
unsafe extern "C" {
    pub fn wgpuSamplerRelease(sampler: WGPUSampler);
}
unsafe extern "C" {
    pub fn wgpuShaderModuleGetCompilationInfo(
        shaderModule: WGPUShaderModule,
        callbackInfo: WGPUCompilationInfoCallbackInfo,
    ) -> WGPUFuture;
}
unsafe extern "C" {
    pub fn wgpuShaderModuleSetLabel(shaderModule: WGPUShaderModule, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuShaderModuleAddRef(shaderModule: WGPUShaderModule);
}
unsafe extern "C" {
    pub fn wgpuShaderModuleRelease(shaderModule: WGPUShaderModule);
}
unsafe extern "C" {
    pub fn wgpuSupportedFeaturesFreeMembers(supportedFeatures: WGPUSupportedFeatures);
}
unsafe extern "C" {
    pub fn wgpuSupportedInstanceFeaturesFreeMembers(
        supportedInstanceFeatures: WGPUSupportedInstanceFeatures,
    );
}
unsafe extern "C" {
    pub fn wgpuSupportedWGSLLanguageFeaturesFreeMembers(
        supportedWGSLLanguageFeatures: WGPUSupportedWGSLLanguageFeatures,
    );
}
unsafe extern "C" {
    pub fn wgpuSurfaceConfigure(surface: WGPUSurface, config: *const WGPUSurfaceConfiguration);
}
unsafe extern "C" {
    pub fn wgpuSurfaceGetCapabilities(
        surface: WGPUSurface,
        adapter: WGPUAdapter,
        capabilities: *mut WGPUSurfaceCapabilities,
    ) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuSurfaceGetCurrentTexture(
        surface: WGPUSurface,
        surfaceTexture: *mut WGPUSurfaceTexture,
    );
}
unsafe extern "C" {
    pub fn wgpuSurfacePresent(surface: WGPUSurface) -> WGPUStatus;
}
unsafe extern "C" {
    pub fn wgpuSurfaceSetLabel(surface: WGPUSurface, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuSurfaceUnconfigure(surface: WGPUSurface);
}
unsafe extern "C" {
    pub fn wgpuSurfaceAddRef(surface: WGPUSurface);
}
unsafe extern "C" {
    pub fn wgpuSurfaceRelease(surface: WGPUSurface);
}
unsafe extern "C" {
    pub fn wgpuSurfaceCapabilitiesFreeMembers(surfaceCapabilities: WGPUSurfaceCapabilities);
}
unsafe extern "C" {
    pub fn wgpuTextureCreateView(
        texture: WGPUTexture,
        descriptor: *const WGPUTextureViewDescriptor,
    ) -> WGPUTextureView;
}
unsafe extern "C" {
    pub fn wgpuTextureDestroy(texture: WGPUTexture);
}
unsafe extern "C" {
    pub fn wgpuTextureGetDepthOrArrayLayers(texture: WGPUTexture) -> u32;
}
unsafe extern "C" {
    pub fn wgpuTextureGetDimension(texture: WGPUTexture) -> WGPUTextureDimension;
}
unsafe extern "C" {
    pub fn wgpuTextureGetFormat(texture: WGPUTexture) -> WGPUTextureFormat;
}
unsafe extern "C" {
    pub fn wgpuTextureGetHeight(texture: WGPUTexture) -> u32;
}
unsafe extern "C" {
    pub fn wgpuTextureGetMipLevelCount(texture: WGPUTexture) -> u32;
}
unsafe extern "C" {
    pub fn wgpuTextureGetSampleCount(texture: WGPUTexture) -> u32;
}
unsafe extern "C" {
    pub fn wgpuTextureGetUsage(texture: WGPUTexture) -> WGPUTextureUsage;
}
unsafe extern "C" {
    pub fn wgpuTextureGetWidth(texture: WGPUTexture) -> u32;
}
unsafe extern "C" {
    pub fn wgpuTextureSetLabel(texture: WGPUTexture, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuTextureAddRef(texture: WGPUTexture);
}
unsafe extern "C" {
    pub fn wgpuTextureRelease(texture: WGPUTexture);
}
unsafe extern "C" {
    pub fn wgpuTextureViewSetLabel(textureView: WGPUTextureView, label: WGPUStringView);
}
unsafe extern "C" {
    pub fn wgpuTextureViewAddRef(textureView: WGPUTextureView);
}
unsafe extern "C" {
    pub fn wgpuTextureViewRelease(textureView: WGPUTextureView);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
